<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[在Coding部署Hexo]]></title>
      <url>http://xuzhibin.com/2016/06/01/hexo-coding/</url>
      <content type="html"><![CDATA[<p>网上的Hexo教程大多是部署在Github，在实际的使用中，Github速度比较满，有时更新还会抽风一下，于是想在国内找个替代方案。</p>
<p>目前来说，Coding从体验和速度来说，都是国内比较好的选择，阿里云虽然也有代码库，但是刚开始起步，很多都还不完善，但是如果做下去，未来看好。</p>
<p>下面以Coding为例，说一下部署的步骤。</p>
<h1 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h1><p>这个就不多说了，常规按步骤注册即可。<a href="https://coding.net/register?key=99951510-5c9f-4659-b088-43f34e0d2b0e" target="_blank" rel="external">传送门</a></p>
<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><ol>
<li><p>我们要创建的是 用户Pages，项目名需要和用户名一样，这样我们就可以用{user_name}.coding.me 形式的 URL 直接访问，适合用作个人或组织的演示网站。</p>
</li>
<li><p>在新建项目里创建一个 coding-pages 分支，Coding默认是用 coding-pages 分支作为Pages的文件库。</p>
</li>
<li><p>开启项目的Pages服务。</p>
</li>
</ol>
<h1 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h1><p>在Coding，我使用 coding-pages 分支发布Hexo，master 分支备份存储源文件。</p>
<p>备份Hexo我是用的插件是 <a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="external">hexo-git-backup</a></p>
<p>下面是我的配置文件，我是同时使用了Github和Coding服务，也可以只使用其中一个。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发布</span></span><br><span class="line"><span class="attr">deploy:</span> </span><br><span class="line"><span class="attr">- type:</span> git</span><br><span class="line"><span class="attr">  repo:</span> </span><br><span class="line"><span class="attr">    github:</span> git@github.com:xuzhibin/xuzhibin.github.io.git,master</span><br><span class="line"><span class="attr">    coding:</span> git@git.coding.net:xuzhibin/xuzhibin.git,coding-pages </span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="attr">backup:</span></span><br><span class="line"><span class="attr">  type:</span> git</span><br><span class="line"><span class="attr">  repository:</span></span><br><span class="line"><span class="attr">    coding:</span> git@git.coding.net:xuzhibin/xuzhibin-backup.git,master</span><br><span class="line"><span class="attr">    github:</span> git@github.com:xuzhibin/hexo-blog-backup.git,master</span><br></pre></td></tr></table></figure>
<h1 id="发布-amp-备份"><a href="#发布-amp-备份" class="headerlink" title="发布 &amp; 备份"></a>发布 &amp; 备份</h1><p>发布</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>备份</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo b</span><br></pre></td></tr></table></figure>
<h1 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h1><p>Github: <a href="http://xuzhibin.github.io" target="_blank" rel="external">xuzhibin.github.io</a></p>
<p>Coding: <a href="http://xuzhibin.coding.me" target="_blank" rel="external">xuzhibin.coding.me</a></p>
<p><a href="https://coding.net/register?key=99951510-5c9f-4659-b088-43f34e0d2b0e" target="_blank" rel="external">Coding注册链接</a></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol>
<li><p>域名绑定,在Coding的Pages标签页，是有域名绑定功能的，我目前的Hexo是用rsync方式发布在阿里云，所以没有具体测试。</p>
</li>
<li><p>Coding可以直接在仓库页打标签（Github没有这个功能），方便以后有需要时可以回滚。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo安装记]]></title>
      <url>http://xuzhibin.com/2016/05/30/hexo-install/</url>
      <content type="html"><![CDATA[<h1 id="Hexo是啥"><a href="#Hexo是啥" class="headerlink" title="Hexo是啥"></a>Hexo是啥</h1><p><a href="https://hexo.io" target="_blank" rel="external">Hexo</a> 是由 Node.js 驱动的一款快速、简单且功能强大的博客框架。可以快速将 Markdown 格式的文档生成静态页面。是越来越笨重的 Wordpress 和麻烦的空间管理的替代方案。</p>
<h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><p>首先翻看一遍 <a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo 官方文档</a></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>安装 Node.js &amp; Git</p>
<p>该命令执行后，自动装好node和npm。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<h2 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h2><p>按照Github提示，创建SSH秘钥：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/.ssh <span class="comment">#创建ssh命令</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span> <span class="comment">#注意更改Email地址</span></span><br><span class="line">$ pbcopy &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>此时，pdcopy命令已经将id_rsa.pub内容复制到剪切板。</p>
<p>登录 github：<a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a> 点击Add an SSH Key，Title 部分填写一个所用电脑的名称，然后在Key部分填写之前通过pdcopy命令复制的内容。生成 key <a href="https://help.github.com/articles/generating-ssh-keys/" target="_blank" rel="external">https://help.github.com/articles/generating-ssh-keys/</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"yourusername"</span></span><br><span class="line">$ git config --global user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>如果是下面的反馈：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (207.97.227.239)'</span> can<span class="string">'t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure>
<p>不要紧张，输入yes就好，然后会看到：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi cnfeat! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>
<h2 id="安装-Hexo-1"><a href="#安装-Hexo-1" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>好了，这个时候如果报错，记得加 sudo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h1><p>进入想要存放博客的文件夹，初始化设置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>初始化成功后，文件夹里会有这些东西：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml        <span class="comment">#配置文件</span></span><br><span class="line">├── package.json    <span class="comment">#应用程序数据</span></span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span>            <span class="comment">#网站内容</span></span><br><span class="line">|   ├── _drafts        <span class="comment">#草稿</span></span><br><span class="line">|   └── _posts        <span class="comment">#文章</span></span><br><span class="line">└── themes            <span class="comment">#主题</span></span><br></pre></td></tr></table></figure>
<p>配置文件的详细说明请查看官方文档。</p>
<h1 id="本地访问博客"><a href="#本地访问博客" class="headerlink" title="本地访问博客"></a>本地访问博客</h1><p>生成静态文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>启动本地服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>这时提示</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>然后在浏览器打开 <a href="http://0.0.0.0:4000/，就可以看到迁移好的博客啦！" target="_blank" rel="external">http://0.0.0.0:4000/，就可以看到迁移好的博客啦！</a></p>
<h1 id="挑选主题"><a href="#挑选主题" class="headerlink" title="挑选主题"></a>挑选主题</h1><p>可参考 有那些好看的 Hexo 主题？</p>
<p>下载主题：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xxxx themes/xxx</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>启用主题：克隆/下载 完成后，打开 站点配置文件 “_config.yml”，找到 theme 字段，并将其值更改为下载的主题名字。</p>
<p>剩下的就根据主题使用文档，按照自己的喜好修改了。</p>
<p>我选的 <a href="http://theme-next.iissnan.com" target="_blank" rel="external">NEXT主题</a> 胜在 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">说明文档</a> 超详细的~</p>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p><strong>站内搜索</strong><br>hexo-generator-search插件为 Hexo3 提供搜索功能。</p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>
<p><strong>Feed</strong><br>hexo-generator-feed 可以生成Atom 1.0 或 RSS 2.0 feed。</p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<p><strong>Sitemap</strong><br>说明</p>
<p>安装：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure>
<h1 id="配置-Github-并上传"><a href="#配置-Github-并上传" class="headerlink" title="配置 Github 并上传"></a>配置 Github 并上传</h1><p>新建跟用户名同名的 repository，以“.github.io” 为后缀</p>
<p>创建成功后，点击界面右侧的Settings，打开页面后找到GitHub Pages，点击Launch automatic page generator，生成 page。</p>
<p>然后在网站配置文件 _config.yml文件中，找到Deployment，修改配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>如果使用 git 方式部署，执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p>命令来安装插件。</p>
<p>安装成功后，在当前目录进行 deploy 操作</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>上传成功后，访问 yourname.github.io ，测试是否可以正常访问。</p>
<h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><p>在 Github 里生成 CNAME 文件<br>为了绑定域名，首先在 Hexo 的 “source” 文件夹中新建一个CNAME文件（没有后缀），文件内容为你要设置的域名。目的是将你的域名（如 uegeek.com ）指向 Github 服务器。</p>
<p>Deploy 到 Github上去后大概需要几分钟生效。</p>
<p>到 DNSPod 新建域名，并添加 CNAME 记录指向 kidult00.github.io 。</p>
<p>当打开 uegeek.com 看到改头换面的博客后，内心默默地原谅自己拖延了两年 T.T</p>
<h1 id="Hexo设置"><a href="#Hexo设置" class="headerlink" title="Hexo设置"></a>Hexo设置</h1><h2 id="站点设置"><a href="#站点设置" class="headerlink" title="站点设置"></a>站点设置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/tommy351/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site #整站的基本信息</span></span><br><span class="line"><span class="attr">title:</span> <span class="number">1000</span> words a Day <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> Writing <span class="number">1000</span> Words a Day Changes My Life <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span> 学习总结 思考感悟 知识管理 <span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">author:</span>  cnFeat <span class="comment">#网站作者，在下方显示</span></span><br><span class="line"><span class="attr">email:</span> cnFeat@gmail.com <span class="comment">#联系邮箱</span></span><br><span class="line"><span class="attr">language:</span> zh-CN</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory</span></span><br><span class="line"><span class="attr">url:</span> http://www.cnfeat.com <span class="comment">#你的域名</span></span><br><span class="line"><span class="attr">root:</span> /</span><br><span class="line"><span class="attr">permalink:</span> :year/:month/:day/:title/</span><br><span class="line"><span class="attr">tag_dir:</span> tags</span><br><span class="line"><span class="attr">archive_dir:</span> archives</span><br><span class="line"><span class="attr">category_dir:</span> categories</span><br><span class="line"><span class="attr">code_dir:</span> downloads/code</span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> source</span><br><span class="line"><span class="attr">public_dir:</span> public</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> :title.md <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> post</span><br><span class="line"><span class="attr">auto_spacing:</span> <span class="literal">false</span> <span class="comment"># Add spaces between asian characters and western characters</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line"><span class="attr">max_open_file:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">multi_thread:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> uncategorized</span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Archives</span></span><br><span class="line"><span class="comment">## 2: Enable pagination</span></span><br><span class="line"><span class="comment">## 1: Disable pagination</span></span><br><span class="line"><span class="comment">## 0: Fully Disable</span></span><br><span class="line"><span class="attr">archive:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">category:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">tag:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Server</span></span><br><span class="line"><span class="comment">## Hexo uses Connect as a server</span></span><br><span class="line"><span class="comment">## You can customize the logger format as defined in</span></span><br><span class="line"><span class="comment">## http://www.senchalabs.org/connect/logger.html</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">4000</span></span><br><span class="line"><span class="attr">server_ip:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">logger:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">logger_format:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> YYYY-MM-DD</span><br><span class="line"><span class="attr">time_format:</span> H:mm:ss</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">15</span> <span class="comment">#每页15篇文章</span></span><br><span class="line"><span class="attr">pagination_dir:</span> page</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus #社会化评论disqus，我使用多说，在主题中配置</span></span><br><span class="line"><span class="attr">disqus_shortname:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</span></span><br><span class="line"><span class="comment">## Themes: https://github.com/tommy351/hexo/wiki/Themes</span></span><br><span class="line"><span class="attr">theme:</span> jacman</span><br><span class="line"><span class="attr">exclude_generator:</span></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line"><span class="bullet">-</span> hexo-generator-feed</span><br><span class="line"><span class="bullet">-</span> hexo-generator-sitemap</span><br><span class="line"></span><br><span class="line"><span class="comment">#sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">  path:</span> sitemap.xml</span><br><span class="line"></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line"><span class="attr">  type:</span> atom</span><br><span class="line"><span class="attr">  path:</span> atom.xml</span><br><span class="line"><span class="attr">  limit:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Markdown</span></span><br><span class="line"><span class="comment">## https://github.com/chjj/marked</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line"><span class="attr">  gfm:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  pedantic:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  sanitize:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  tables:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  breaks:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  smartLists:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  smartypants:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Stylus</span></span><br><span class="line"><span class="attr">stylus:</span></span><br><span class="line"><span class="attr">  compress:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> github</span><br><span class="line"><span class="attr">  repository:</span> https://github.com/xuzhibin/xuzhibin.github.io.git</span><br><span class="line"><span class="attr">  branch:</span> master</span><br></pre></td></tr></table></figure>
<h2 id="模版设置"><a href="#模版设置" class="headerlink" title="模版设置"></a>模版设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── languages  <span class="comment">#多语言</span></span><br><span class="line">|   ├── default.yml<span class="comment">#默认语言</span></span><br><span class="line">|   └── zh-CN.yml  <span class="comment">#中文语言</span></span><br><span class="line">├── layout <span class="comment">#布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</span></span><br><span class="line">|   ├── _partial   <span class="comment">#局部的布局，此目录下的*.ejs是对头尾等局部的控制</span></span><br><span class="line">|   └── _widget<span class="comment">#小挂件的布局，页面下方小挂件的控制</span></span><br><span class="line">├── <span class="built_in">source</span> <span class="comment">#源码</span></span><br><span class="line">|   ├── css<span class="comment">#css源码 </span></span><br><span class="line">|   |   ├── _base  <span class="comment">#*.styl基础css</span></span><br><span class="line">|   |   ├── _partial   <span class="comment">#*.styl局部css</span></span><br><span class="line">|   |   ├── fonts  <span class="comment">#字体</span></span><br><span class="line">|   |   ├── images <span class="comment">#图片</span></span><br><span class="line">|   |   └── style.styl <span class="comment">#*.styl引入需要的css源码</span></span><br><span class="line">|   ├── fancybox   <span class="comment">#fancybox效果源码</span></span><br><span class="line">|   └── js <span class="comment">#javascript源代码</span></span><br><span class="line">├── _config.yml<span class="comment">#主题配置文件</span></span><br><span class="line">└── README.md  <span class="comment">#用GitHub的都知道</span></span><br></pre></td></tr></table></figure>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="发表新文章"><a href="#发表新文章" class="headerlink" title="发表新文章"></a>发表新文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n <span class="comment">#写文章</span></span><br></pre></td></tr></table></figure>
<p>其中my new post为文章标题，执行命令后，会在项目\source_posts中生成my new post.md文件，用编辑器打开编写即可。</p>
<p>当然，也可以直接在\source_posts中新建一个md文件，我就是这么做的。</p>
<p>写完后，推送到服务器上，执行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g <span class="comment">#生成</span></span><br><span class="line">$ hexo d <span class="comment">#部署 # 可与hexo g合并为 hexo d -g</span></span><br></pre></td></tr></table></figure>
<h2 id="用Hexo发表文章的Markdown语法"><a href="#用Hexo发表文章的Markdown语法" class="headerlink" title="用Hexo发表文章的Markdown语法"></a>用Hexo发表文章的Markdown语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: postName <span class="comment">#文章页面上的显示名称，可以任意修改，不会出现在URL中</span></span><br><span class="line">date: 2013-12-02 15:30:16 <span class="comment">#文章生成时间，一般不改，当然也可以任意修改</span></span><br><span class="line">categories: example <span class="comment">#分类</span></span><br><span class="line">tags: [tag1,tag2,tag3] <span class="comment">#文章标签，可空，多标签请用格式，注意:后面有个空格</span></span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内。</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下正文</span><br></pre></td></tr></table></figure>
<h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></span><br></pre></td></tr></table></figure>
<h2 id="常用复合命令"><a href="#常用复合命令" class="headerlink" title="常用复合命令"></a>常用复合命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g <span class="comment">#生成加部署</span></span><br><span class="line">hexo s -g <span class="comment">#预览加部署</span></span><br></pre></td></tr></table></figure>
<h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>
<h1 id="Hexo备份"><a href="#Hexo备份" class="headerlink" title="Hexo备份"></a>Hexo备份</h1><p>已有人写了插件，<a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="external">hexo-git-backup</a>，按步骤操作即可；</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure>
<p>修改站点配置文件 _config.yml.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">backup:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repository:</span><br><span class="line">       github: git@github.com:xxx/xxx.git,branchName</span><br><span class="line">       gitcafe: git@github.com:xxx/xxx.git,branchName</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo backup</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo b</span><br></pre></td></tr></table></figure>
<h1 id="Hexo部署在VPS"><a href="#Hexo部署在VPS" class="headerlink" title="Hexo部署在VPS"></a>Hexo部署在VPS</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-rsync --save</span><br></pre></td></tr></table></figure>
<p>根据 <a href="https://hexo.io/zh-cn/docs/deployment.html#Rsync" target="_blank" rel="external">Hexo rsync 部署文档</a> 在 Hexo 中的 _config.yml 中添加 Deploy 的配置，以下是我在自己项目中的配置代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: rsync</span><br><span class="line">  host: 你 VPS 的 IP 地址或者域名</span><br><span class="line">  user: root</span><br><span class="line">  root: 你想将 Hexo 生成的静态文件存放在 VPS 中的目录 例如: /www/hexo/blog/</span><br><span class="line">  port: 你 VPS 的 ssh 端口号</span><br><span class="line">  delete: true</span><br><span class="line">  verbose: true</span><br><span class="line">  ignore_errors: false</span><br></pre></td></tr></table></figure>
<p>*必须先在 VPS 上创建好了想要存放 Hexo 静态文件的目录， rsync 不能创建不存在的目录</p>
<p>我看网上有的朋友说光在 Hexo 中使用 rsync 不够，在 VPS 也需要下载 rsync 服务，但是我在阿里云上就没有下载 rsync 服务。如果你在 Hexo 中用 rsync 部署的时候一直报错，那就在 VPS 上下载 rsync 服务，看能否解决一直出错的原因，命令如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install rsync</span><br></pre></td></tr></table></figure>
<p>如果rsync 报下面的错误</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync error: some files could not be transferred (code 23) at main.c(702)</span><br></pre></td></tr></table></figure>
<p>解决方法: rsync的source有些文件没有读权限，所以报错。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +r  ./* -R</span><br></pre></td></tr></table></figure>
<p>再次同步，即可OK.</p>
<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="http://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm小结]]></title>
      <url>http://xuzhibin.com/2016/05/29/npm-summary/</url>
      <content type="html"><![CDATA[<p>随着一系列基于nodes的应用/工具的出现，无论在node应用的开发，还是使用中，包管理都扮演着一个很重要的作用。NPM（node package manager），作为node的包管理工具，极大地便利了我们的开发工作，很有必要了解一下。</p>
<h1 id="NPM是什么"><a href="#NPM是什么" class="headerlink" title="NPM是什么"></a>NPM是什么</h1><p>NPM（node package manager），通常称为node包管理器。顾名思义，它的主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。<br>npm的背后，是基于couchdb的一个数据库，详细记录了每个包的信息，包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。</p>
<p>npm官网：<a href="https://npmjs.org/" target="_blank" rel="external">https://npmjs.org/</a></p>
<p>npm官方文档：<a href="https://npmjs.org/doc/README.html" target="_blank" rel="external">https://npmjs.org/doc/README.html</a></p>
<h1 id="我们需要了解什么"><a href="#我们需要了解什么" class="headerlink" title="我们需要了解什么"></a>我们需要了解什么</h1><ol>
<li>npm的安装、卸载、升级、配置</li>
<li>npm的使用：package的安装、卸载、升级、查看、搜索、发布</li>
<li>npm包的安装模式：本地 vs 全局</li>
<li>package.json：包描述信息</li>
<li>package版本：常见版本声明形式</li>
</ol>
<h1 id="npm的安装-Mac"><a href="#npm的安装-Mac" class="headerlink" title="npm的安装 Mac"></a>npm的安装 Mac</h1><p>该命令执行后，自动装好node和npm。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>
<h2 id="npm包安装模式"><a href="#npm包安装模式" class="headerlink" title="npm包安装模式"></a>npm包安装模式</h2><p>在具体介绍npm包的管理之前，我们首先得来了解一下npm包的两种安装模式。</p>
<h2 id="本地安装-vs-全局安装（重要）"><a href="#本地安装-vs-全局安装（重要）" class="headerlink" title="本地安装 vs 全局安装（重要）"></a>本地安装 vs 全局安装（重要）</h2><p>node包的安装分两种：本地安装、全局安装。两者的区别如下，后面会通过简单例子说明<br>本地安装：package会被下载到当前所在目录，也只能在当前目录下使用。<br>全局安装：package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。</p>
<h2 id="npm-install-pkg-–-本地安装"><a href="#npm-install-pkg-–-本地安装" class="headerlink" title="npm install pkg – 本地安装"></a>npm install pkg – 本地安装</h2><p>运行如下命令，就会在当前目录下安装grunt-cli（grunt命令行工具）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-cli</span><br></pre></td></tr></table></figure>
<p>安装结束后，当前目录下回多出一个node_modules目录，grunt-cli就安装在里面。同时注意控制台输出的信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grunt-cli@0.1.9 node_modules/grunt-cli</span><br><span class="line">├── resolve@0.3.1</span><br><span class="line">├── nopt@1.0.10 (abbrev@1.0.4)</span><br><span class="line">└── findup-sync@0.1.2 (lodash@1.0.1, glob@3.1.21)</span><br></pre></td></tr></table></figure>
<p>简单说明一下：</p>
<ol>
<li>grunt-cli@0.1.9：当前安装的package为grunt-cli，版本为0.19</li>
<li>node_modules/grunt-cli：安装目录</li>
<li>resolve@0.3.1：依赖的包有resolve、nopt、findup-sync，它们各自的版本、依赖在后面的括号里列出来</li>
</ol>
<h2 id="npm-install-g-pkg-全局安装"><a href="#npm-install-g-pkg-全局安装" class="headerlink" title="npm install -g pkg- 全局安装"></a>npm install -g pkg- 全局安装</h2><p>上面已经安装了grunt-cli，然后你跑到其他目录下面运行如下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grunt</span><br></pre></td></tr></table></figure>
<p>果断提示你grunt命令不存在，为什么呢？因为上面只是进行了本地安装，grunt命令只能在对应安装目录下使用。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-bash: grunt: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>
<p>如果为了使用grunt命令，每到一个目录下都得重新安装一次，那不抓狂才怪。肿么办呢？<br>很简单，采用全局安装就行了，很简单，加上参数-g就可以了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g grunt-cli</span><br></pre></td></tr></table></figure>
<p>于是，在所有目录下都可以无压力使用grunt命令了。这个时候，你会注意到控制台输入的信息有点不同。主要的区别在于安装目录，现在变成了/usr/local/lib/node_modules/grunt-cli，/usr/local/lib/node_modules/也就是之前所说的全局安装目录啦。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grunt-cli@0.1.9 /usr/<span class="built_in">local</span>/lib/node_modules/grunt-cli</span><br><span class="line">├── resolve@0.3.1</span><br><span class="line">├── nopt@1.0.10 (abbrev@1.0.4)</span><br><span class="line">└── findup-sync@0.1.2 (lodash@1.0.1, glob@3.1.21)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="npm包管理"><a href="#npm包管理" class="headerlink" title="npm包管理"></a>npm包管理</h1><p>npm的包管理命令是使用频率最高的，所以也是我们需要牢牢记住并熟练使用的。其实无非也就是几个动作：安装、卸载、更新、查看、搜索、发布等。</p>
<p><strong>安装最新版本的grunt-cli</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-cli</span><br></pre></td></tr></table></figure>
<p><strong>安装0.1.9版本的grunt-cli</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-cli@<span class="string">"0.1.9"</span></span><br></pre></td></tr></table></figure>
<p><strong>通过package.json进行安装</strong></p>
<p>如果我们的项目依赖了很多package，一个一个地安装那将是个体力活。我们可以将项目依赖的包都在package.json这个文件里声明，然后一行命令搞定</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nam install</span><br></pre></td></tr></table></figure>
<p><strong>其他package安装命令</strong><br>运行如下命令，列出所有npm install可能的参数形式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --help</span><br></pre></td></tr></table></figure>
<p>输出如下，有兴趣的童鞋可以了解下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;tarball file&gt;</span><br><span class="line">npm install &lt;tarball url&gt;</span><br><span class="line">npm install &lt;folder&gt;</span><br><span class="line">npm install &lt;pkg&gt;</span><br><span class="line">npm install &lt;pkg&gt;@&lt;tag&gt;</span><br><span class="line">npm install &lt;pkg&gt;@&lt;version&gt;</span><br><span class="line">npm install &lt;pkg&gt;@&lt;version range&gt;</span><br></pre></td></tr></table></figure>
<p><strong>卸载grunt-cli</strong><br>比如卸载grunt-cli</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall grunt-cli</span><br></pre></td></tr></table></figure>
<p>卸载0.1.9版本的grunt-cli</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall grunt-cli@<span class="string">"0.1.9"</span></span><br></pre></td></tr></table></figure>
<p><strong>npm ls：查看安装了哪些包</strong></p>
<p>运行如下命令，就可以查看当前目录安装了哪些package</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls</span><br></pre></td></tr></table></figure>
<p>输出如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/private/tmp/npm</span><br><span class="line">└─┬ grunt-cli@0.1.9</span><br><span class="line">  ├─┬ findup-sync@0.1.2</span><br><span class="line">  │ ├─┬ glob@3.1.21</span><br><span class="line">  │ │ ├── graceful-fs@1.2.3</span><br><span class="line">  │ │ ├── inherits@1.0.0</span><br><span class="line">  │ │ └─┬ minimatch@0.2.12</span><br><span class="line">  │ │   ├── lru-cache@2.3.0</span><br><span class="line">  │ │   └── sigmund@1.0.0</span><br><span class="line">  │ └── lodash@1.0.1</span><br><span class="line">  ├─┬ nopt@1.0.10</span><br><span class="line">  │ └── abbrev@1.0.4</span><br><span class="line">  └── resolve@0.3.1</span><br></pre></td></tr></table></figure>
<p>输出如下，同样，如果是要查看package的全局安装信息，加上-g就可以</p>
<p><strong>npm ls pkg：查看特定package的信息</strong><br>运行如下命令，输出grunt-cli的信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls grunt-cli</span><br></pre></td></tr></table></figure>
<p>输出的信息比较有限，只有安装目录、版本，如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/private/tmp/npm</span><br><span class="line">└── grunt-cli@0.1.9</span><br></pre></td></tr></table></figure>
<p>如果要查看更详细信息，可以通过npm info pkg，输出的信息非常详尽，包括作者、版本、依赖等。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm info grunt-cli</span><br></pre></td></tr></table></figure>
<p><strong>npm update pkg：package更新</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update grunt-cli</span><br></pre></td></tr></table></figure>
<p><strong>npm search pgk：搜索</strong><br>输入如下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm search grunt-cli</span><br></pre></td></tr></table></figure>
<p>返回结果如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm http GET http://registry.npmjs.org/-/all/since?stale=update_after&amp;startkey=1375519407838</span><br><span class="line">npm http 200 http://registry.npmjs.org/-/all/since?stale=update_after&amp;startkey=1375519407838</span><br><span class="line">NAME                  DESCRIPTION                                        AUTHOR            DATE              KEYWORDS</span><br><span class="line">grunt-cli             The grunt <span class="built_in">command</span> line interface.                  =cowboy =tkellen  2013-07-27 02:24</span><br><span class="line">grunt-cli-dev-exitprocess The grunt <span class="built_in">command</span> line interface.              =dnevnik          2013-03-11 16:19</span><br><span class="line">grunt-client-compiler Grunt wrapper <span class="keyword">for</span> client-compiler.                 =rubenv           2013-03-26 09:15  gruntplugin</span><br><span class="line">grunt-clientside      Generate clientside js code from CommonJS modules  =jga              2012-11-07 01:20  gruntplugin</span><br></pre></td></tr></table></figure>
<h1 id="npm发布"><a href="#npm发布" class="headerlink" title="npm发布"></a>npm发布</h1><p>这个命令我自己也还没实际用过，不误导大家，语法如下，也可参考官方对于package发布的说明 <a href="https://npmjs.org/doc/developers.html：" target="_blank" rel="external">https://npmjs.org/doc/developers.html：</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm publish &lt;tarball&gt;</span><br><span class="line">npm publish &lt;folder&gt;</span><br></pre></td></tr></table></figure>
<h1 id="NPM配置"><a href="#NPM配置" class="headerlink" title="NPM配置"></a>NPM配置</h1><p>npm的配置工作主要是通过npm config命令，主要包含增、删、改、查几个步骤，下面就以最为常用的proxy配置为例。</p>
<h2 id="设置proxy"><a href="#设置proxy" class="headerlink" title="设置proxy"></a>设置proxy</h2><p>内网使用npm很头痛的一个问题就是代理，假设我们的代理是 <a href="http://proxy.example.com:8080，那么命令如下：" target="_blank" rel="external">http://proxy.example.com:8080，那么命令如下：</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy http://proxy.example.com:8080</span><br></pre></td></tr></table></figure>
<p>由于npm config set命令比较常用，于是可以如下简写</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">set</span> proxy http://proxy.example.com:8080</span><br></pre></td></tr></table></figure>
<h2 id="查看proxy"><a href="#查看proxy" class="headerlink" title="查看proxy"></a>查看proxy</h2><p>设置完，我们查看下当前代理设置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get proxy</span><br></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://proxy.example.com:8080/</span><br></pre></td></tr></table></figure>
<p>同样可如下简写：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm get proxy</span><br></pre></td></tr></table></figure>
<h2 id="删除proxy"><a href="#删除proxy" class="headerlink" title="删除proxy"></a>删除proxy</h2><p>代理不需要用到了，那删了吧</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm delete proxy</span><br></pre></td></tr></table></figure>
<h2 id="查看所有配置"><a href="#查看所有配置" class="headerlink" title="查看所有配置"></a>查看所有配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure>
<h2 id="直接修改配置文件"><a href="#直接修改配置文件" class="headerlink" title="直接修改配置文件"></a>直接修改配置文件</h2><p>有时候觉得一条配置一条配置地修改有些麻烦，就直接进配置文件修改了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config edit</span><br></pre></td></tr></table></figure>
<h1 id="关于package-json"><a href="#关于package-json" class="headerlink" title="关于package.json"></a>关于package.json</h1><p>这货在官网似乎没有详细的描述，其实就是包的描述信息啦。假设当我们下载了node应用，这个node应用依赖于A、B、C三个包，如果没有package.json，我们需要人肉安装这个三个包（如果对版本有特定要求就更悲剧了）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install A</span><br><span class="line">npm install B</span><br><span class="line">npm install C</span><br></pre></td></tr></table></figure>
<p>有了package.json，一行命令安装所有依赖。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<h2 id="package-json的生成"><a href="#package-json的生成" class="headerlink" title="package.json的生成"></a>package.json的生成</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>
<h2 id="package-json字段简介"><a href="#package-json字段简介" class="headerlink" title="package.json字段简介"></a>package.json字段简介</h2><p>字段相当多，但最重要的的是下面几个</p>
<blockquote>
<p>name: package的名字（由于他会成为url的一部分，所以 non-url-safe 的字母不会通过，也不允许出现”.”、”_”），最好先在<a href="http://registry.npmjs.org/上搜下你取的名字是否已经存在" target="_blank" rel="external">http://registry.npmjs.org/上搜下你取的名字是否已经存在</a></p>
<p>version: package的版本，当package发生变化时，version也应该跟着一起变化，同时，你声明的版本需要通过semver的校验（semver可自行谷歌）<br>dependencies: package的应用依赖模块，即别人要使用这个package，至少需要安装哪些东东。应用依赖模块会安装到当前模块的node_modules目录下。</p>
<p>devDependencies：package的开发依赖模块，即别人要在这个package上进行开发</p>
<p>其他：参见官网</p>
</blockquote>
<h2 id="package版本"><a href="#package版本" class="headerlink" title="package版本"></a>package版本</h2><p>在package.json里，你经常会在包名后看到类似”~0.1.0″这样的字符串，这就是包的版本啦。下面会列举最常见的版本声明形式，以及版本书写的要求：<br>常见版本声明形式<br>a、”~1.2.3″ 是神马意思呢，看下面领悟</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;~1.2.3&quot; = &quot;&gt;=1.2.3 &amp;lt;1.3.0&quot;</span><br><span class="line">&quot;~1.2&quot; = &quot;&gt;=1.2.0 &amp;lt;1.3.0&quot;</span><br><span class="line">&quot;~1&quot; = &quot;&gt;=1.0.0 &amp;lt;1.1.0&quot;</span><br></pre></td></tr></table></figure>
<p>b、”1.x.x”是什么意思呢，继续自行领悟</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;1.2.x&quot; = &quot;&gt;=1.2.0 &amp;lt;1.3.0&quot;</span><br><span class="line">&quot;1.x.x&quot; = &quot;&gt;=1.0.0 &amp;lt;2.0.0&quot;</span><br><span class="line">&quot;1.2&quot; = &quot;1.2.x&quot;</span><br><span class="line">&quot;1.x&quot; = &quot;1.x.x&quot;</span><br><span class="line">&quot;1&quot; = &quot;1.x.x&quot;</span><br></pre></td></tr></table></figure>
<p>版本书写要求</p>
<ol>
<li>版本可以v开头，比如 v1.0.1（v只是可选）</li>
<li>1.0.1-7，这里的7是所谓的“构建版本号”，不理是神马，反正版本大于1.0.1</li>
<li>1.0.1beta，或者1.0.1-beta，如果1.0.1后面不是 “连字符加数字” 这种形式，那么它是pre release 版本，即版本小于 1.0.1</li>
<li>根据b、c，有：0.1.2-7 &gt; 0.1.2-7-beta &gt; 0.1.2-6 &gt; 0.1.2 &gt; 0.1.2beta</li>
</ol>
<h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>内容只是简单地把最常见的命令，以及一些需要了解的内容列了出来。如要进一步了解，可参考官网说明。此外，npm help是我们最好的朋友，如果忘了有哪些命令，命令下有哪些参数，可通过help进行查看。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 常用命令速查表]]></title>
      <url>http://xuzhibin.com/2013/11/07/git-command/</url>
      <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"John Doe"</span></span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure>
<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> [url] <span class="comment">#克隆远程版本库</span></span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/schacon/grit.git</span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/schacon/grit.git mygrit</span><br><span class="line">$ git <span class="built_in">clone</span> --bare my_project my_project.git <span class="comment">#创建纯仓库</span></span><br><span class="line">$ git init <span class="comment">#初始化本地版本库</span></span><br><span class="line">$ git init --bare <span class="comment">#创建纯仓库</span></span><br></pre></td></tr></table></figure>
<h1 id="修改和提交"><a href="#修改和提交" class="headerlink" title="修改和提交"></a>修改和提交</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git status <span class="comment">#查看状态</span></span><br><span class="line">$ git diff <span class="comment">#查看变更内容</span></span><br><span class="line">$ git diff --cached <span class="comment">#查看已经暂存起来的文件和上次提交时的快照之间的差异</span></span><br><span class="line">$ git diff master...contrib <span class="comment">#特性分支contrib和它同master分支的共同祖先之间的差异（合并时实际将要引入的新代码）</span></span><br><span class="line">$ git add . <span class="comment">#跟踪所有改动过的文件</span></span><br><span class="line">$ git add [file] <span class="comment">#跟踪指定的文件</span></span><br><span class="line">$ git mv [old] [new] <span class="comment">#文件改名</span></span><br><span class="line">$ git rm [file] <span class="comment">#删除文件</span></span><br><span class="line">$ git rm --cached [file] <span class="comment">#停止跟踪文件但不删除</span></span><br><span class="line">$ git commit -m <span class="string">"commit message"</span> <span class="comment">#提交所有更新过的文件</span></span><br><span class="line">$ git commit --amend <span class="comment">#修改最后一次提交</span></span><br><span class="line">$ git commit <span class="_">-a</span> -m <span class="string">'added new benchmarks'</span> <span class="comment">#跳过暂存区域直接提交</span></span><br></pre></td></tr></table></figure>
<h1 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> <span class="comment">#查看提交历史</span></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">$ git <span class="built_in">log</span> -p [file] <span class="comment">#查看指定文件的提交历史</span></span><br><span class="line">$ git <span class="built_in">log</span> master..experiemnt <span class="comment">#所有可从experiment分支中获得而不能从master分支中获得的提交</span></span><br><span class="line">$ git blame [file] <span class="comment">#以列表方式查看指定文件的提交历史</span></span><br><span class="line">$ git <span class="built_in">log</span> origin/featureA ^featureA <span class="comment">#比较origin/featureA及featureA分支，查看origin/featureA更新了哪些内容</span></span><br></pre></td></tr></table></figure>
<h1 id="撤消"><a href="#撤消" class="headerlink" title="撤消"></a>撤消</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD <span class="comment">#撤消工作目录中所有未提交文件的修改内容</span></span><br><span class="line">$ git reset --hard [commit] <span class="comment">#会退到某个[commit]</span></span><br><span class="line">$ git reset HEAD [file] <span class="comment">#取消已经暂存的文件</span></span><br><span class="line">$ git checkout HEAD [file] <span class="comment">#撤消指定的未提交文件的修改内容[已暂存]</span></span><br><span class="line">$ git checkout -- benchmarks.rb <span class="comment">#取消对文件的修改[未暂存]</span></span><br><span class="line">$ git revert [commit] <span class="comment">#撤消指定的提交</span></span><br></pre></td></tr></table></figure>
<h1 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git branch <span class="comment">#显示所有本地分支</span></span><br><span class="line">$ git checkout [branch/tag] <span class="comment">#切换到指定分支或标签</span></span><br><span class="line">$ git checkout -b featureB origin/master <span class="comment">#从分支origin/master克隆并创建分支featureB，切换至featureB</span></span><br><span class="line">$ git branch [new-branch] <span class="comment">#创建新分支</span></span><br><span class="line">$ git branch sc/ruby_client master <span class="comment">#从master分支克隆一个sc/ruby_client分支</span></span><br><span class="line">$ git branch <span class="_">-d</span> [branch] <span class="comment">#删除本地分支</span></span><br><span class="line">$ git branch --merged <span class="comment">#查看哪些分支已被并入当前分支</span></span><br><span class="line">$ git branch --no-merged <span class="comment">#查看哪些分支未被并入当前分支</span></span><br><span class="line">$ git tag <span class="comment">#列出所有本地标签</span></span><br><span class="line">$ git tag [tagname] <span class="comment">#基于最新提交创建标签</span></span><br><span class="line">$ git tag <span class="_">-d</span> [tagname] <span class="comment">#删除标签</span></span><br></pre></td></tr></table></figure>
<h1 id="合并与衍合"><a href="#合并与衍合" class="headerlink" title="合并与衍合"></a>合并与衍合</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git merge [branch] <span class="comment">#合并指定分支到当前分支</span></span><br><span class="line">$ git rebase [branch] <span class="comment">#衍合指定分支到当前分支</span></span><br></pre></td></tr></table></figure>
<h1 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v <span class="comment">#查看远程版本库信息</span></span><br><span class="line">$ git remote show [remote] <span class="comment">#查看指定远程版本库信息</span></span><br><span class="line">$ git remote add [remote] [url] <span class="comment">#添加远程版本库</span></span><br><span class="line">$ git remote  rename [old-remote-name] [new-remote-name]  <span class="comment">#远程仓库的重命名</span></span><br><span class="line">$ git remote rm [remote]   <span class="comment">#远程仓库的删除</span></span><br><span class="line">$ git fetch [remote] <span class="comment">#从远程库获取代码</span></span><br><span class="line">$ git pull [remote] [branch] <span class="comment">#下载代码及快速合并至当前分支</span></span><br><span class="line">$ git push [remote] [branch] <span class="comment">#上传代码及快速合并</span></span><br><span class="line">$ git push origin featureB[本地分支]:featureBee[远程分支] <span class="comment">#推送本地分支至指定的远程分支</span></span><br><span class="line">$ git push [remote] :[branch/tag-name] <span class="comment">#删除远程分支或标签</span></span><br><span class="line">$ git push --tags <span class="comment">#上传所有标签</span></span><br></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git describe master <span class="comment">#生成内部版本号</span></span><br><span class="line">$ git archive master --prefix=<span class="string">'project/'</span> | gzip &gt; <span class="string">'git describe master'</span>.tar.gz <span class="comment">#打包成tar</span></span><br><span class="line">$ git archive master --prefix=<span class="string">'project/'</span> --format=zip &gt; <span class="string">'git describe master'</span>.zip <span class="comment">#打包成zip</span></span><br><span class="line">$ git stash <span class="comment">#储藏</span></span><br><span class="line">$ git stash list <span class="comment">#查看储藏列表</span></span><br><span class="line">$ git stash apply stash@2 <span class="comment">#应用名为stash@2 的储藏。如果你不指明，Git 默认使用最近的储藏并尝试应用它</span></span><br><span class="line">$ git stash drop stash@&#123;0&#125; <span class="comment">#移除名为stash@&#123;0&#125;的储藏</span></span><br><span class="line">$ git blame -L 12,22 simplegit.rb <span class="comment">#文件标注</span></span><br></pre></td></tr></table></figure>
<h1 id="Git文件"><a href="#Git文件" class="headerlink" title="Git文件"></a>Git文件</h1><p>.gitattributes #属性文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.doc diff=word</span><br><span class="line">database.xml merge=ours</span><br></pre></td></tr></table></figure>
<p>.gitignore #忽略某些文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此为注释– 将被Git忽略</span></span><br><span class="line">*.[oa] <span class="comment"># 忽略所有.o或.a结尾的文件</span></span><br><span class="line">!lib.a <span class="comment"># 但lib.a 除外</span></span><br><span class="line">/TODO <span class="comment"># 仅仅忽略项目根目录下的TODO文件，不包括subdir/TODO</span></span><br><span class="line">build/ <span class="comment"># 忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt <span class="comment"># 会忽略doc/notes.txt但不包括doc/server/arch.txt</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Linux下重置MySQL root密码]]></title>
      <url>http://xuzhibin.com/2013/08/17/reset-mysql-rootpass/</url>
      <content type="html"><![CDATA[<p>1、停止MySQL服务<br>执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql stop</span><br></pre></td></tr></table></figure>
<p>你的机器上也不一定是/etc/init.d/mysql，也可能是/etc/init.d/mysqld</p>
<p>2、跳过验证启动MySQL</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mysql/bin/mysqld_safe --skip-grant-tables &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>注：如果mysqld_safe的位置如果和上面不一样需要修改成你的，如果不清楚可以用find命令查找。</p>
<p>3、重置密码<br>等一会儿，然后执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mysql/bin/mysql -u root mysql</span><br></pre></td></tr></table></figure>
<p>出现mysql提示符后输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user <span class="built_in">set</span> password = Password(<span class="string">'要设置的密码'</span>) <span class="built_in">where</span> User = <span class="string">'root'</span>;</span><br></pre></td></tr></table></figure>
<p>回车后执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<p>刷新MySQL系统权限相关的表。再执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure>
<p>退出。</p>
<p>4、重启MySQL<br>杀死MySQL进程：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall mysqld</span><br></pre></td></tr></table></figure>
<p>重启MySQL：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysql start</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[VPS硬盘被撑满]]></title>
      <url>http://xuzhibin.com/2013/04/12/vps-harddisk-full/</url>
      <content type="html"><![CDATA[<p>早上打开博客，发现显示“无法连上数据库”，遂登录ssh，重启服务。重启后，Wordpress可以访问了，但是标签及分类目录全部丢失。一阵Google，百度后，大多说是缓存爆满导致。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -lh</span><br></pre></td></tr></table></figure>
<p>果然，硬盘空间全部满了。于是寻找是哪个目录的问题。</p>
<ol>
<li>先du -sh /*, 在/home目录的地方卡住了，然后Ctrl+C, 然后</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll|grep -v <span class="string">"total"</span>|grep -v <span class="string">"home"</span>|awk <span class="string">'&#123;print $9&#125;'</span>|xargs du -sh</span><br></pre></td></tr></table></figure>
<ol>
<li>发现其他目录不大，知道是/home目录的问题了</li>
<li>递归对/home目录使用上面的方法处理</li>
</ol>
<p>最后，发现是wordpress目录下的 wp-content/cache/* 超过10G了，此目录是 W3 Total Cache插件 的缓存目录，清空以下目录：</p>
<p>wp-content/cache/object/*</p>
<p>wp-content/cache/db/*</p>
<p>wp-content/cache/page/*</p>
<p>wp-content/cache/tmp/*</p>
<p>重启服务，OK。</p>
<p>此文给使用W3TC插件的同学一个提醒。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android中加载图片时出现oom]]></title>
      <url>http://xuzhibin.com/2013/02/21/android-oom/</url>
      <content type="html"><![CDATA[<p>ImageView加载图片时，有时会出现OOM</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imageView.setImageResource(imageId);</span><br></pre></td></tr></table></figure>
<p>解决方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 以最省内存的方式读取本地资源的图片</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@param</span> context</span><br><span class="line"> * <span class="doctag">@param</span> resId</span><br><span class="line"> * <span class="doctag">@return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">readBitMap</span><span class="params">(Context context, <span class="keyword">int</span> resId)</span> </span>&#123;</span><br><span class="line">    BitmapFactory.Options opt = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">    opt.inPreferredConfig = Bitmap.Config.RGB_565;</span><br><span class="line">    opt.inPurgeable = <span class="keyword">true</span>;</span><br><span class="line">    opt.inInputShareable = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 获取资源图片</span></span><br><span class="line">    InputStream is = context.getResources().openRawResource(resId);</span><br><span class="line">    <span class="keyword">return</span> BitmapFactory.decodeStream(is, <span class="keyword">null</span>, opt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Bitmap bitmap=readBitMap(LoginActivity.<span class="keyword">this</span>,imageId);</span><br><span class="line">imageView.setImageBitmap(bitmap);</span><br></pre></td></tr></table></figure>
<p>那是为什么，会导致oom呢：</p>
<p>　　原来当使用像 imageView.setBackgroundResource，imageView.setImageResource, 或者 BitmapFactory.decodeResource 这样的方法来设置一张大图片的时候，这些函数在完成decode后，最终都是通过java层的createBitmap来完成的，需要消耗更多内存。</p>
<p>　　因此，改用先通过BitmapFactory.decodeStream方法，创建出一个bitmap，再将其设为ImageView的 source，decodeStream最大的秘密在于其直接调用JNI&gt;&gt;nativeDecodeAsset()来完成decode，无需再使用java层的createBitmap，从而节省了java层的空间。如果在读取时加上图片的Config参数，可以跟有效减少加载的内存，从而跟有效阻止抛out of Memory异常。</p>
<p>　　另外，需要特别注意：</p>
<p>　　decodeStream是直接读取图片资料的字节码了， 不会根据机器的各种分辨率来自动适应，使用了decodeStream之后，需要在hdpi和mdpi，ldpi中配置相应的图片资源，否则在不同分辨率机器上都是同样大小（像素点数量），显示出来的大小就不对了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Go Socket例子]]></title>
      <url>http://xuzhibin.com/2012/12/12/go-socket/</url>
      <content type="html"><![CDATA[<h1 id="Tcp-Server-tcpserver-go"><a href="#Tcp-Server-tcpserver-go" class="headerlink" title="Tcp Server (tcpserver.go)"></a>Tcp Server (tcpserver.go)</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    service := <span class="string">":1200"</span></span><br><span class="line">    tcpAddr, err := net.ResolveTCPAddr(<span class="string">"tcp4"</span>, service)</span><br><span class="line">    checkError(err)</span><br><span class="line">    listener, err := net.ListenTCP(<span class="string">"tcp"</span>, tcpAddr)</span><br><span class="line">    checkError(err)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        conn, err := listener.Accept()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">go</span> handleClient(conn)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleClient</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line">    daytime := time.Now().String()</span><br><span class="line">    fmt.Fprintf(os.Stderr,<span class="string">"connect time:%s,client ip:%s\r\n"</span>,daytime,conn.RemoteAddr().String())</span><br><span class="line"></span><br><span class="line">    _,err := conn.Write([]<span class="keyword">byte</span>(daytime)) <span class="comment">// don't care about return value</span></span><br><span class="line">    checkError(err)</span><br><span class="line">    fmt.Fprintf(os.Stderr,<span class="string">"send time:%s\r\n"</span>,daytime)</span><br><span class="line">    <span class="comment">// we're finished with this client</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkError</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">"Fatal error: %s"</span>, err.Error())</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Tcp-Client-tcpclient-go"><a href="#Tcp-Client-tcpclient-go" class="headerlink" title="Tcp Client (tcpclient.go)"></a>Tcp Client (tcpclient.go)</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">tcpclient <span class="number">192.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1200</span> | tcpclient baidu.com:<span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) != <span class="number">2</span> &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">"Usage: %s host:port "</span>, os.Args[<span class="number">0</span>])</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    service := os.Args[<span class="number">1</span>]</span><br><span class="line">    tcpAddr, err := net.ResolveTCPAddr(<span class="string">"tcp4"</span>, service)</span><br><span class="line">    checkError(err)</span><br><span class="line">    conn, err := net.DialTCP(<span class="string">"tcp"</span>, <span class="literal">nil</span>, tcpAddr)</span><br><span class="line">    checkError(err)</span><br><span class="line">    _, err = conn.Write([]<span class="keyword">byte</span>(<span class="string">"HEAD / HTTP/1.0\r\n\r\n"</span>))</span><br><span class="line">    checkError(err)</span><br><span class="line"></span><br><span class="line">    result := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line">    _,err = conn.Read(result)</span><br><span class="line">    checkError(err)</span><br><span class="line">    fmt.Println(<span class="string">"receive from server:\r\n"</span>)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(result))</span><br><span class="line">    os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkError</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Fprintf(os.Stderr, <span class="string">"Fatal error: %s"</span>, err.Error())</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ElasticSearch入门笔记]]></title>
      <url>http://xuzhibin.com/2012/09/06/elasticsearch-getstart/</url>
      <content type="html"><![CDATA[<p>ElasticSearch 是构建在Apache Lucene之上的的搜索引擎服务，开源（Apache2协议），分布式，RESTful。安装方便，使用简单。</p>
<p>官方站点：<a href="http://www.elasticsearch.com/" target="_blank" rel="external">http://www.elasticsearch.com/</a></p>
<p>中文站点：<a href="http://es-cn.medcl.net/" target="_blank" rel="external">http://es-cn.medcl.net/</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>必须先安装Java环境，并设置 JAVA_HOME =&gt; C:\Program Files\Java\jdk1.6.0_18</p>
<p><strong>elasticsearch-rtf 中文入门集成包</strong> <a href="https://github.com/medcl/elasticsearch-rtf" target="_blank" rel="external">https://github.com/medcl/elasticsearch-rtf</a><br>使用git签出，下载到本地。windows下，执行bin下面的elasticsearch.bat。linux下，执行bin下面或者service下面elasticsearch。</p>
<p><strong>Pyes</strong> <a href="https://github.com/aparo/pyes" target="_blank" rel="external">https://github.com/aparo/pyes</a> <a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank" rel="external">更多客户端</a></p>
<p><strong>Bottle</strong> <a href="http://bottlepy.org/docs/dev/" target="_blank" rel="external">http://bottlepy.org/docs/dev/</a></p>
<h1 id="角色关系对照"><a href="#角色关系对照" class="headerlink" title="角色关系对照"></a>角色关系对照</h1><p>elasticsearch 跟 MySQL 中定义资料格式的角色关系对照表如下</p>
<table>
<thead>
<tr>
<th>MySQL</th>
<th>helasticsearch</th>
</tr>
</thead>
<tbody>
<tr>
<td>database</td>
<td>index</td>
</tr>
<tr>
<td>table</td>
<td>type</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
</tr>
<tr>
<td>field</td>
<td>field</td>
</tr>
</tbody>
</table>
<h1 id="索引映射"><a href="#索引映射" class="headerlink" title="索引映射"></a>索引映射</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建索引</span></span><br><span class="line">$ curl -XPUT http://localhost:9200/<span class="built_in">test</span>-index</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Mapping</span></span><br><span class="line">$ curl -XPUT http://localhost:9200/<span class="built_in">test</span>-index/<span class="built_in">test</span>-type/_mapping <span class="_">-d</span> <span class="string">'&#123;</span><br><span class="line">    "properties" : &#123;</span><br><span class="line">        "name" : &#123; "type" : "string" &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@route('/indexsetting/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">indexmapping</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""索引映射"""</span></span><br><span class="line">    conn = ES(<span class="string">'127.0.0.1:9200'</span>)</span><br><span class="line">    conn.debug_dump = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#删除索引</span></span><br><span class="line">        conn.delete_index(<span class="string">"test-index"</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="comment">#创建索引</span></span><br><span class="line">    conn.create_index(<span class="string">"test-index"</span>)</span><br><span class="line">    mapping = &#123;</span><br><span class="line">           <span class="string">u'id'</span>: &#123;<span class="string">'store'</span>: <span class="string">'yes'</span>,</span><br><span class="line">                    <span class="string">'type'</span>: <span class="string">u'integer'</span>&#125;,</span><br><span class="line">           <span class="string">u'author'</span>: &#123;<span class="string">'boost'</span>: <span class="number">1.0</span>,</span><br><span class="line">                       <span class="string">'index'</span>: <span class="string">'not_analyzed'</span>,</span><br><span class="line">                       <span class="string">'store'</span>: <span class="string">'yes'</span>,</span><br><span class="line">                       <span class="string">'type'</span>: <span class="string">u'string'</span>&#125;,</span><br><span class="line">           <span class="string">u'published'</span>: &#123;<span class="string">'boost'</span>: <span class="number">1.0</span>,</span><br><span class="line">                          <span class="string">'index'</span>: <span class="string">'not_analyzed'</span>,</span><br><span class="line">                          <span class="string">'store'</span>: <span class="string">'yes'</span>,</span><br><span class="line">                          <span class="string">'type'</span>: <span class="string">u'datetime'</span>&#125;,</span><br><span class="line">           <span class="string">u'url'</span>: &#123;<span class="string">'store'</span>: <span class="string">'yes'</span>,</span><br><span class="line">                    <span class="string">'type'</span>: <span class="string">u'string'</span>&#125;,</span><br><span class="line">           <span class="string">u'title'</span>: &#123;<span class="string">'boost'</span>: <span class="number">1.0</span>,</span><br><span class="line">                       <span class="string">'index'</span>: <span class="string">'analyzed'</span>,</span><br><span class="line">                       <span class="string">'store'</span>: <span class="string">'yes'</span>,</span><br><span class="line">                       <span class="string">'type'</span>: <span class="string">u'string'</span>&#125;,</span><br><span class="line">           <span class="string">u'content'</span>: &#123;<span class="string">'boost'</span>: <span class="number">1.0</span>,</span><br><span class="line">                       <span class="string">'index'</span>: <span class="string">'analyzed'</span>,</span><br><span class="line">                       <span class="string">'store'</span>: <span class="string">'yes'</span>,</span><br><span class="line">                       <span class="string">'type'</span>: <span class="string">u'string'</span>,</span><br><span class="line">                       <span class="string">"term_vector"</span> : <span class="string">"with_positions_offsets"</span>&#125;</span><br><span class="line">           &#125;</span><br><span class="line">    <span class="comment">#索引映射</span></span><br><span class="line">    conn.put_mapping(<span class="string">"test-type"</span>, &#123;<span class="string">'properties'</span>:mapping&#125;, [<span class="string">"test-index"</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"索引映射"</span></span><br></pre></td></tr></table></figure>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#索引</span></span><br><span class="line">$ curl -XPUT http://localhost:9200/<span class="built_in">test</span>-index/<span class="built_in">test</span>-type/1 <span class="_">-d</span> <span class="string">'&#123;</span><br><span class="line">    "user": "kimchy",</span><br><span class="line">    "post_date": "2009-11-15T13:12:00",</span><br><span class="line">    "message": "Trying out elasticsearch, so far so good?"</span><br><span class="line">&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取</span></span><br><span class="line">$ curl -XGET http://localhost:9200/<span class="built_in">test</span>-index/<span class="built_in">test</span>-type/1</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">$ curl -XDELETE <span class="string">'http://localhost:9200/test-index/test-type/1'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@route('/indextest/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">indexTest</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""索引测试"""</span></span><br><span class="line">    conn = ES(<span class="string">'127.0.0.1:9200'</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> Data().getData():</span><br><span class="line">        <span class="comment">#添加索引</span></span><br><span class="line">        conn.index(item,<span class="string">"test-index"</span>, <span class="string">"test-type"</span>,item[<span class="string">'id'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#索引优化</span></span><br><span class="line">    conn.optimize([<span class="string">"test-index"</span>])</span><br><span class="line">    <span class="comment">#删除索引内容</span></span><br><span class="line">    conn.delete(<span class="string">"test-index"</span>, <span class="string">"test-type"</span>, <span class="number">2668090</span>)</span><br><span class="line">    <span class="comment">#更新索引内容</span></span><br><span class="line">    model = conn.get(<span class="string">"test-index"</span>, <span class="string">"test-type"</span>, <span class="number">2667371</span>)</span><br><span class="line">    model[<span class="string">"title"</span>]=<span class="string">"标题修改测试"</span></span><br><span class="line">    conn.update(model,<span class="string">"test-index"</span>, <span class="string">"test-type"</span>,<span class="number">2667371</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#刷新索引</span></span><br><span class="line">    conn.refresh([<span class="string">"test-index"</span>])</span><br><span class="line"></span><br><span class="line">    q = MatchAllQuery()</span><br><span class="line">    results = conn.search(query = q,indices=<span class="string">"test-index"</span>, doc_types=<span class="string">"test-type"</span>)</span><br><span class="line"><span class="comment">#    for r in results:</span></span><br><span class="line"><span class="comment">#        print r</span></span><br><span class="line">    <span class="keyword">return</span> template(<span class="string">'default.tpl'</span>, list=results,count=len(results))</span><br></pre></td></tr></table></figure>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#lucene语法方式的查询</span></span><br><span class="line">$ curl -XGET http://localhost:9200/<span class="built_in">test</span>-index/<span class="built_in">test</span>-type/_search?q=user:kimchy</span><br><span class="line"></span><br><span class="line"><span class="comment">#query DSL方式查询</span></span><br><span class="line">$ curl -XGET http://localhost:9200/<span class="built_in">test</span>-index/<span class="built_in">test</span>-type/_search <span class="_">-d</span> <span class="string">'&#123;</span><br><span class="line">    "query" : &#123;</span><br><span class="line">        "term" : &#123; "user": "kimchy" &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#query DSL方式查询</span></span><br><span class="line">$ curl -XGET http://localhost:9200/<span class="built_in">test</span>-index/_search?pretty=<span class="literal">true</span> <span class="_">-d</span> <span class="string">'&#123;</span><br><span class="line">    "query" : &#123;</span><br><span class="line">        "range" : &#123;</span><br><span class="line">            "post_date" : &#123;</span><br><span class="line">                "from" : "2009-11-15T13:00:00",</span><br><span class="line">                "to" : "2009-11-15T14:30:00"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找全部索引内容</span></span><br><span class="line">$ curl -XGET http://localhost:9200/<span class="built_in">test</span>-index/<span class="built_in">test</span>-type/_search?pretty=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@route('/search/')</span></span><br><span class="line"><span class="meta">@route('/search/&lt;searchkey&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(searchkey=<span class="string">u"关键算法"</span>)</span>:</span></span><br><span class="line">    <span class="string">"""索引搜索"""</span></span><br><span class="line">    conn = ES(<span class="string">'127.0.0.1:9200'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#TextQuery会对searchkey进行分词</span></span><br><span class="line">    qtitle = TextQuery(<span class="string">"title"</span>, searchkey)</span><br><span class="line">    qcontent = TextQuery(<span class="string">"content"</span>, searchkey)</span><br><span class="line">    <span class="comment">#发布时间大于"2012-9-2 22:00:00"</span></span><br><span class="line">    qpublished=RangeQuery(ESRangeOp(<span class="string">"published"</span>, <span class="string">"gt"</span>, datetime(<span class="number">2012</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">22</span>, <span class="number">0</span>, <span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line">    h = HighLighter([<span class="string">'&lt;b&gt;'</span>], [<span class="string">'&lt;/b&gt;'</span>], fragment_size=<span class="number">500</span>)</span><br><span class="line">    <span class="comment">#多字段搜索(must=&gt;and,should=&gt;or)，高亮，结果截取（分页），排序</span></span><br><span class="line">    q = Search(BoolQuery(must=[qpublished],should=[qtitle,qcontent]), highlight=h, start=<span class="number">0</span>, size=<span class="number">3</span>, sort=&#123;<span class="string">'id'</span>: &#123;<span class="string">'order'</span>: <span class="string">'asc'</span>&#125;&#125;)</span><br><span class="line">    q.add_highlight(<span class="string">"title"</span>)</span><br><span class="line">    q.add_highlight(<span class="string">"content"</span>)</span><br><span class="line">    results = conn.search(query = q,indices=<span class="string">"test-index"</span>, doc_types=<span class="string">"test-type"</span>)</span><br><span class="line"></span><br><span class="line">    list=[]</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">        <span class="keyword">if</span>(r._meta.highlight.has_key(<span class="string">"title"</span>)):</span><br><span class="line">            r[<span class="string">'title'</span>]=r._meta.highlight[<span class="string">u"title"</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span>(r._meta.highlight.has_key(<span class="string">"content"</span>)):</span><br><span class="line">            r[<span class="string">'content'</span>]=r._meta.highlight[<span class="string">u"content"</span>][<span class="number">0</span>]</span><br><span class="line">        list.append(r)</span><br><span class="line">    <span class="keyword">return</span> template(<span class="string">'search.tpl'</span>, list=list,count=results.total)</span><br></pre></td></tr></table></figure>
<h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建索引，并设置分片和副本参数</span></span><br><span class="line">$ curl -XPUT http://localhost:9200/elasticsearch/ <span class="_">-d</span> <span class="string">'&#123;</span><br><span class="line">    "settings" : &#123;</span><br><span class="line">        "number_of_shards" : 2,</span><br><span class="line">        "number_of_replicas" : 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;'</span></span><br></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分词</span></span><br><span class="line">curl -XGET <span class="string">'http://localhost:9200/test-index/_analyze?text=中华人民共和国'</span></span><br></pre></td></tr></table></figure>
<p><a href="/uploads/files/elasticsearch_demo.rar">例子程序下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[安装Tornado]]></title>
      <url>http://xuzhibin.com/2012/05/12/install-tornado/</url>
      <content type="html"><![CDATA[<p>安装Tornado</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/downloads/facebook/tornado/tornado-2.2.1.tar.gz</span><br><span class="line">tar xvzf tornado-2.2.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> tornado-2.2.1</span><br><span class="line">python setup.py build</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure>
<p>到此，tornado已安装完成。</p>
<p>开启服务，运行hello world程序</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tornado-2.2.1</span><br><span class="line">./demos/helloworld/helloworld.py</span><br></pre></td></tr></table></figure>
<p>　　　<br>此时打开浏览器，地址栏输入：<a href="http://127.0.0.1:8888，即可看到hello，world" target="_blank" rel="external">http://127.0.0.1:8888，即可看到hello，world</a></p>
<p>也可以通过命令行查看</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m tornado.httpclient http://127.0.0.1:8888</span><br></pre></td></tr></table></figure>
<p>如果连接不上可以打开iptables的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure>
<p>看看是否没有开放端口，修改后重启iptables</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>
<p>例，开放8000~8999端口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A POSTROUTING -p tcp -m state --state NEW -m tcp --dport 8000:8999 -j ACCEPT</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mongodb常用命令]]></title>
      <url>http://xuzhibin.com/2012/04/10/mongodb-command/</url>
      <content type="html"><![CDATA[<h1 id="超级用户相关"><a href="#超级用户相关" class="headerlink" title="超级用户相关"></a>超级用户相关</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#进入数据库admin</span><br><span class="line">use admin</span><br><span class="line">#增加或修改用户密码</span><br><span class="line">db.addUser('name','pwd')</span><br><span class="line">#查看用户列表</span><br><span class="line">db.system.users.find()</span><br><span class="line">#用户认证</span><br><span class="line">db.auth('name','pwd')</span><br><span class="line">#删除用户</span><br><span class="line">db.removeUser('name')</span><br><span class="line">#查看所有用户</span><br><span class="line">show users</span><br><span class="line">#查看所有数据库</span><br><span class="line">show dbs</span><br><span class="line">#查看所有的collection</span><br><span class="line">show collections</span><br><span class="line">#查看各collection的状态</span><br><span class="line">db.printCollectionStats()</span><br><span class="line">#查看主从复制状态</span><br><span class="line">db.printReplicationInfo()</span><br><span class="line">#修复数据库</span><br><span class="line">db.repairDatabase()</span><br><span class="line">#设置记录profiling，0=off 1=slow 2=all</span><br><span class="line">db.setProfilingLevel(1)</span><br><span class="line">#查看profiling</span><br><span class="line">show profile</span><br><span class="line">#拷贝数据库</span><br><span class="line">db.copyDatabase('mail_addr','mail_addr_tmp')</span><br><span class="line">#删除collection</span><br><span class="line">db.mail_addr.drop()</span><br><span class="line">#删除当前的数据库</span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>
<h1 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#存储嵌套的对象</span><br><span class="line">db.foo.save(&#123;'name':'ysz','address':&#123;'city':'beijing','post':100096&#125;,'phone':[138,139]&#125;)</span><br><span class="line">#存储数组对象</span><br><span class="line">db.user_addr.save(&#123;'Uid':'yushunzhi@sohu.com','Al':['test-1@sohu.com','test-2@sohu.com']&#125;)</span><br><span class="line">#根据query条件修改，如果不存在则插入，允许修改多条记录</span><br><span class="line">db.foo.update(&#123;'yy':5&#125;,&#123;'$set':&#123;'xx':2&#125;&#125;,upsert=true,multi=true)</span><br><span class="line">#删除yy=5的记录</span><br><span class="line">db.foo.remove(&#123;'yy':5&#125;)</span><br><span class="line">#删除所有的记录</span><br><span class="line">db.foo.remove()</span><br></pre></td></tr></table></figure>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#增加索引：1(ascending),-1(descending)</span><br><span class="line">db.foo.ensureIndex(&#123;firstname: 1, lastname: 1&#125;, &#123;unique: true&#125;);</span><br><span class="line">#索引子对象</span><br><span class="line">db.user_addr.ensureIndex(&#123;'Al.Em': 1&#125;)</span><br><span class="line">#查看索引信息</span><br><span class="line">db.foo.getIndexes()</span><br><span class="line">db.foo.getIndexKeys()</span><br><span class="line">#根据索引名删除索引</span><br><span class="line">db.user_addr.dropIndex('Al.Em_1')</span><br></pre></td></tr></table></figure>
<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#查找所有</span><br><span class="line">db.foo.find()</span><br><span class="line">#查找一条记录</span><br><span class="line">db.foo.findOne()</span><br><span class="line">#根据条件检索10条记录</span><br><span class="line">db.foo.find(&#123;'msg':'Hello 1'&#125;).limit(10)</span><br><span class="line">#sort排序</span><br><span class="line">db.deliver_status.find(&#123;'From':'ixigua@sina.com'&#125;).sort(&#123;'Dt',-1&#125;)</span><br><span class="line">db.deliver_status.find().sort(&#123;'Ct':-1&#125;).limit(1)</span><br><span class="line">#count操作</span><br><span class="line">db.user_addr.count()</span><br><span class="line">#distinct操作,查询指定列，去重复</span><br><span class="line">db.foo.distinct('msg')</span><br><span class="line">#”&amp;gt;=”操作</span><br><span class="line">db.foo.find(&#123;"timestamp": &#123;"$gte" : 2&#125;&#125;)</span><br><span class="line">#子对象的查找</span><br><span class="line">db.foo.find(&#123;'address.city':'beijing'&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查看collection数据的大小</span><br><span class="line">db.deliver_status.dataSize()</span><br><span class="line">#查看colleciont状态</span><br><span class="line">db.deliver_status.stats()</span><br><span class="line">#查询所有索引的大小</span><br><span class="line">db.deliver_status.totalIndexSize()</span><br></pre></td></tr></table></figure>
<h1 id="advanced-queries-高级查询"><a href="#advanced-queries-高级查询" class="headerlink" title="advanced queries:高级查询"></a>advanced queries:高级查询</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">#条件操作符</span><br><span class="line">$gt : &gt; </span><br><span class="line">$gte: &gt; = </span><br><span class="line">$lt : &lt; ,   </span><br><span class="line">$lte: &lt; = </span><br><span class="line">$ne : !=、&lt;&gt; </span><br><span class="line">$in : in </span><br><span class="line">$nin: not in </span><br><span class="line">$all: all </span><br><span class="line">$not: 反匹配(1.3.3及以上版本) </span><br><span class="line"></span><br><span class="line">#查询 name &lt;&gt; "bruce" and age &gt;= 18 的数据 </span><br><span class="line">db.users.find(&#123;name: &#123;$ne: "bruce"&#125;, age: &#123;$gte: 18&#125;&#125;); </span><br><span class="line"></span><br><span class="line">#查询 creation_date &gt; '2010-01-01' and creation_date &lt; = '2010-12-31' 的数据 </span><br><span class="line">db.users.find(&#123;creation_date:&#123;$gt:new Date(2010,0,1), $lte:new Date(2010,11,31)&#125;); </span><br><span class="line"></span><br><span class="line">#查询 age in (20,22,24,26) 的数据 </span><br><span class="line">db.users.find(&#123;age: &#123;$in: [20,22,24,26]&#125;&#125;); </span><br><span class="line"></span><br><span class="line">#查询 age取模10等于0 的数据 </span><br><span class="line">db.users.find('this.age % 10 == 0'); </span><br><span class="line">#或者 </span><br><span class="line">db.users.find(&#123;age : &#123;$mod : [10, 0]&#125;&#125;); </span><br><span class="line"></span><br><span class="line">#匹配所有 </span><br><span class="line">db.users.find(&#123;favorite_number : &#123;$all : [6, 8]&#125;&#125;); </span><br><span class="line">#可以查询出</span><br><span class="line">&#123;name: 'David', age: 26, favorite_number: [ 6, 8, 9 ] &#125; </span><br><span class="line">#可以不查询出</span><br><span class="line">&#123;name: 'David', age: 26, favorite_number: [ 6, 7, 9 ] &#125; </span><br><span class="line"></span><br><span class="line">#查询不匹配name=B*带头的记录 </span><br><span class="line">db.users.find(&#123;name: &#123;$not: /^B.*/&#125;&#125;); </span><br><span class="line">#查询 age取模10不等于0 的数据 </span><br><span class="line">db.users.find(&#123;age : &#123;$not: &#123;$mod : [10, 0]&#125;&#125;&#125;); </span><br><span class="line"></span><br><span class="line">#返回部分字段 </span><br><span class="line">#选择返回age和_id字段(_id字段总是会被返回) </span><br><span class="line">db.users.find(&#123;&#125;, &#123;age:1&#125;); </span><br><span class="line">db.users.find(&#123;&#125;, &#123;age:3&#125;); </span><br><span class="line">db.users.find(&#123;&#125;, &#123;age:true&#125;); </span><br><span class="line">db.users.find(&#123; name : "bruce" &#125;, &#123;age:1&#125;); </span><br><span class="line">0为false, 非0为true </span><br><span class="line"></span><br><span class="line">#选择返回age、address和_id字段 </span><br><span class="line">db.users.find(&#123; name : "bruce" &#125;, &#123;age:1, address:1&#125;); </span><br><span class="line"></span><br><span class="line">#排除返回age、address和_id字段 </span><br><span class="line">db.users.find(&#123;&#125;, &#123;age:0, address:false&#125;); </span><br><span class="line">db.users.find(&#123; name : "bruce" &#125;, &#123;age:0, address:false&#125;); </span><br><span class="line"></span><br><span class="line">#数组元素个数判断 </span><br><span class="line">#对于&#123;name: 'David', age: 26, favorite_number: [ 6, 7, 9 ] &#125;记录 </span><br><span class="line">#匹配</span><br><span class="line">db.users.find(&#123;favorite_number: &#123;$size: 3&#125;&#125;); </span><br><span class="line">#不匹配</span><br><span class="line">db.users.find(&#123;favorite_number: &#123;$size: 2&#125;&#125;); </span><br><span class="line"></span><br><span class="line">#$exists判断字段是否存在 </span><br><span class="line">#查询所有存在name字段的记录 </span><br><span class="line">db.users.find(&#123;name: &#123;$exists: true&#125;&#125;); </span><br><span class="line">#查询所有不存在phone字段的记录 </span><br><span class="line">db.users.find(&#123;phone: &#123;$exists: false&#125;&#125;); </span><br><span class="line"></span><br><span class="line">#$type判断字段类型 </span><br><span class="line">#查询所有name字段是字符类型的 </span><br><span class="line">db.users.find(&#123;name: &#123;$type: 2&#125;&#125;); </span><br><span class="line">#查询所有age字段是整型的 </span><br><span class="line">db.users.find(&#123;age: &#123;$type: 16&#125;&#125;); </span><br><span class="line"></span><br><span class="line">#对于字符字段，可以使用正则表达式 </span><br><span class="line">#查询以字母b或者B带头的所有记录 </span><br><span class="line">db.users.find(&#123;name: /^b.*/i&#125;); </span><br><span class="line"></span><br><span class="line">#$elemMatch(1.3.1及以上版本) </span><br><span class="line">#为数组的字段中匹配其中某个元素 </span><br><span class="line"></span><br><span class="line">#Javascript查询和$where查询 </span><br><span class="line">#查询 age &gt; 18 的记录，以下查询都一样 </span><br><span class="line">db.users.find(&#123;age: &#123;$gt: 18&#125;&#125;); </span><br><span class="line">db.users.find(&#123;$where: "this.age &gt; 18"&#125;); </span><br><span class="line">db.users.find("this.age &gt; 18"); </span><br><span class="line">f = function() &#123;return this.age &gt; 18&#125; db.users.find(f); </span><br><span class="line"></span><br><span class="line">#排序sort() </span><br><span class="line">#以年龄升序asc </span><br><span class="line">db.users.find().sort(&#123;age: 1&#125;); </span><br><span class="line">#以年龄降序desc </span><br><span class="line">db.users.find().sort(&#123;age: -1&#125;); </span><br><span class="line"></span><br><span class="line">#限制返回记录数量limit() </span><br><span class="line">#返回5条记录 </span><br><span class="line">db.users.find().limit(5); </span><br><span class="line">#返回3条记录并打印信息 </span><br><span class="line">db.users.find().limit(3).forEach(function(user) &#123;print('my age is ' + user.age)&#125;); </span><br><span class="line">结果 </span><br><span class="line">my age is 18 </span><br><span class="line">my age is 19 </span><br><span class="line">my age is 20 </span><br><span class="line"></span><br><span class="line">#限制返回记录的开始点skip() </span><br><span class="line">#从第3条记录开始，返回5条记录(limit 3, 5) </span><br><span class="line">db.users.find().skip(3).limit(5); </span><br><span class="line"></span><br><span class="line">#查询记录条数count() </span><br><span class="line">db.users.find().count(); </span><br><span class="line">db.users.find(&#123;age:18&#125;).count(); </span><br><span class="line">#以下返回的不是5，而是user表中所有的记录数量 </span><br><span class="line">db.users.find().skip(10).limit(5).count(); </span><br><span class="line">#如果要返回限制之后的记录数量，要使用count(true)或者count(非0) </span><br><span class="line">db.users.find().skip(10).limit(5).count(true); </span><br><span class="line"></span><br><span class="line">#分组group()</span><br><span class="line">#假设test表只有以下一条数据</span><br><span class="line">&#123; domain: "www.mongodb.org"</span><br><span class="line">, invoked_at: &#123;d:"2009-11-03", t:"17:14:05"&#125;</span><br><span class="line">, response_time: 0.05</span><br><span class="line">, http_action: "GET /display/DOCS/Aggregation"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#使用group统计test表11月份的数据count:count(*)、total_time:sum(response_time)、avg_time:total_time/count;</span><br><span class="line">db.test.group(</span><br><span class="line">&#123; cond: &#123;"invoked_at.d": &#123;$gt: "2009-11", $lt: "2009-12"&#125;&#125;</span><br><span class="line">, key: &#123;http_action: true&#125;</span><br><span class="line">, initial: &#123;count: 0, total_time:0&#125;</span><br><span class="line">, reduce: function(doc, out)&#123; out.count++; out.total_time+=doc.response_time &#125;</span><br><span class="line">, finalize: function(out)&#123; out.avg_time = out.total_time / out.count &#125;</span><br><span class="line">&#125; );</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    "http_action" : "GET /display/DOCS/Aggregation",</span><br><span class="line">    "count" : 1,</span><br><span class="line">    "total_time" : 0.05,</span><br><span class="line">    "avg_time" : 0.05</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动WebApp开发记录]]></title>
      <url>http://xuzhibin.com/2011/12/02/webapp-devlog/</url>
      <content type="html"><![CDATA[<p>这段时间在做移动WebApp开发，基于PhoneGap+Jquery Mobile，遇到不少问题，下面进行部分总结。</p>
<p>1.webStorage有大小限制(5M)，Chrome出现”QUOTA_EXCEEDED_ERR: DOM Exception 22″错误，极有可能因为webStorage缓存的问题。</p>
<p>2.localStorage只能存字符串，不能存对象。</p>
<p>3.Jquery的Html(str)函数会将str里的内容进行过滤，遇到显示有问题，可使用(“.show”)[0].innerHTML=str代替。</p>
<p>4.对于xml字符串，如果用jquery操作，需转换为xml对象，$.parseXML(source)。对于从接口返回的xml，Jquery可以设置指定返回xml对象。</p>
<p>5.Jquery Mobile在不同的页面切换，Android有明显的卡顿及闪屏感觉。</p>
<p>$.mobile.showPageLoadingMsg()不生效。</p>
<p>A1.Android有明显的卡顿及闪屏感觉，据说是因为其对CSS3支持不好。</p>
<p>A2.Jquery Mobile在不同的页面切换，需要Loading效果的可以试下以下代码:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">w2mTransitionHandler</span>(<span class="params"> name, reverse, $to, $from </span>) </span>&#123;</span><br><span class="line">    $(<span class="string">".ui-loader"</span>).css(&#123;<span class="string">"display"</span>: <span class="string">"block"</span>, <span class="string">"top"</span>: <span class="string">"252px !important"</span> &#125;);</span><br><span class="line">    <span class="keyword">var</span> deferred = <span class="keyword">new</span> $.Deferred(),</span><br><span class="line">    reverseClass = reverse ? <span class="string">" reverse"</span> : <span class="string">""</span>,</span><br><span class="line">    viewportClass = <span class="string">"ui-mobile-viewport-transitioning viewport-"</span> + name,</span><br><span class="line">    doneFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        $to.add( $<span class="keyword">from</span> ).removeClass( <span class="string">"out in reverse "</span> + name );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( $<span class="keyword">from</span> &amp;&amp; $<span class="keyword">from</span>[ <span class="number">0</span> ] !== $to[ <span class="number">0</span> ] ) &#123;</span><br><span class="line">            $<span class="keyword">from</span>.removeClass( $.mobile.activePageClass );</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        $to.parent().removeClass( viewportClass );</span><br><span class="line">        $(<span class="string">".ui-loader"</span>).css(&#123; <span class="string">"display"</span>: <span class="string">"none"</span> &#125;);</span><br><span class="line">        deferred.resolve( name, reverse, $to, $<span class="keyword">from</span> );</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $to.animationComplete( doneFunc );</span><br><span class="line"></span><br><span class="line">    $to.parent().addClass( viewportClass );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( $<span class="keyword">from</span> ) &#123;</span><br><span class="line">        $<span class="keyword">from</span>.addClass( name + <span class="string">" out"</span> + reverseClass );</span><br><span class="line">    &#125;</span><br><span class="line">    $to.addClass( $.mobile.activePageClass + <span class="string">" "</span> + name + <span class="string">" in"</span> + reverseClass );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deferred.promise();</span><br><span class="line">&#125;</span><br><span class="line">$.mobile.defaultTransitionHandler = w2mTransitionHandler;</span><br></pre></td></tr></table></figure>
<p>A3.$.mobile.showPageLoadingMsg()有时会不生效，考虑以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">":button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   </span><br><span class="line">    <span class="comment">//position:fixed;top: 252px !important; display: block;</span></span><br><span class="line">    $(<span class="string">".ui-loader"</span>).css(&#123;<span class="string">"top"</span>: <span class="string">"252 !important"</span>,<span class="string">"position"</span>:<span class="string">"fixed"</span>&#125;);</span><br><span class="line">    $(<span class="string">".ui-loader"</span>).show(<span class="string">"normal"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> list = <span class="keyword">new</span> ListData(channelid, num, channelname);</span><br><span class="line">        list.getData();</span><br><span class="line">        <span class="keyword">if</span>(list.list.length==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            alert(<span class="string">"已是最后一页"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            list.showData();</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        $(<span class="string">".ui-loader"</span>).hide(<span class="string">"normal"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[悟透JavaScript笔记]]></title>
      <url>http://xuzhibin.com/2011/11/08/understand-javascript/</url>
      <content type="html"><![CDATA[<p>原生闭包</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">firstName, lastName, age</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//私有变量：</span></span><br><span class="line">    <span class="keyword">var</span> _firstName = firstName;</span><br><span class="line">    <span class="keyword">var</span> _lastName = lastName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共变量:</span></span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法：</span></span><br><span class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>(firstName + <span class="string">" "</span> + lastName);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.SayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        alert(<span class="string">"Hello, I'm "</span> + firstName + <span class="string">" "</span> + lastName);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> BillGates = <span class="keyword">new</span> Person(<span class="string">"Bill"</span>, <span class="string">"Gates"</span>, <span class="number">53</span>);</span><br><span class="line"><span class="keyword">var</span> SteveJobs = <span class="keyword">new</span> Person(<span class="string">"Steve"</span>, <span class="string">"Jobs"</span>, <span class="number">53</span>);</span><br><span class="line"></span><br><span class="line">BillGates.SayHello();</span><br><span class="line">SteveJobs.SayHello();</span><br><span class="line">alert(BillGates.getName() + <span class="string">" "</span> + BillGates.age);</span><br><span class="line">alert(BillGates.firstName);     <span class="comment">//这里不能访问到私有变量</span></span><br></pre></td></tr></table></figure>
<p>甘露模型</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类的语法甘露：Class()</span></span><br><span class="line"><span class="comment">//最后一个参数是JSON表示的类定义</span></span><br><span class="line"><span class="comment">//如果参数数量大于1个，则第一个参数是基类</span></span><br><span class="line"><span class="comment">//第一个和最后一个之间参数，将来可表示类实现的接口</span></span><br><span class="line"><span class="comment">//返回值是类，类是一个构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Class</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aDefine = <span class="built_in">arguments</span>[<span class="built_in">arguments</span>.length<span class="number">-1</span>]; <span class="comment">//最后一个参数是类定义</span></span><br><span class="line">    <span class="keyword">if</span>(!aDefine) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> aBase = <span class="built_in">arguments</span>.length&gt;<span class="number">1</span> ? <span class="built_in">arguments</span>[<span class="number">0</span>] : object; <span class="comment">//解析基类</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">prototype_</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">//构造prototype的临时函数，用于挂接原型链</span></span><br><span class="line">    prototype_.prototype = aBase.prototype;  <span class="comment">//准备传递prototype</span></span><br><span class="line">    <span class="keyword">var</span> aPrototype = <span class="keyword">new</span> prototype_();    <span class="comment">//建立类要用的prototype</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> member <span class="keyword">in</span> aDefine)  <span class="comment">//复制类定义到当前类的prototype</span></span><br><span class="line">        <span class="keyword">if</span>(member!=<span class="string">"Create"</span>)    <span class="comment">//构造函数不用复制</span></span><br><span class="line">            aPrototype[member] = aDefine[member];</span><br><span class="line">            </span><br><span class="line">    <span class="comment">//根据是否继承特殊属性和性能情况，可分别注释掉下列的语句</span></span><br><span class="line">    <span class="keyword">if</span>(aDefine.toString != <span class="built_in">Object</span>.prototype.toString)</span><br><span class="line">        aPrototype.toString = aDefine.toString;</span><br><span class="line">    <span class="keyword">if</span>(aDefine.toLocaleString != <span class="built_in">Object</span>.prototype.toLocaleString)</span><br><span class="line">        aPrototype.toLocaleString = aDefine.toLocaleString;</span><br><span class="line">    <span class="keyword">if</span>(aDefine.valueOf != <span class="built_in">Object</span>.prototype.valueOf)</span><br><span class="line">        aPrototype.valueOf = aDefine.valueOf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(aDefine.Create)  <span class="comment">//若有构造函数</span></span><br><span class="line">        <span class="keyword">var</span> aType = aDefine.Create  <span class="comment">//类型即为该构造函数</span></span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//否则为默认构造函数</span></span><br><span class="line">        aType = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.base.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);   <span class="comment">//调用基类构造函数</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    aType.prototype = aPrototype;   <span class="comment">//设置类(构造函数)的prototype</span></span><br><span class="line">    aType.Base = aBase;             <span class="comment">//设置类型关系，便于追溯继承关系</span></span><br><span class="line">    aType.prototype.Type = aType;   <span class="comment">//为本类对象扩展一个Type属性</span></span><br><span class="line">    <span class="keyword">return</span> aType;   <span class="comment">//返回构造函数作为类</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根类object定义：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params"></span>)</span>&#123;&#125;    <span class="comment">//定义小写的object根类，用于实现最基础的方法等</span></span><br><span class="line">object.prototype.isA = <span class="function"><span class="keyword">function</span>(<span class="params">aType</span>)   //判断对象是否属于某类型</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>.Type;</span><br><span class="line">    <span class="keyword">while</span>(self)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(self == aType) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        self = self.Base;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">object.prototype.base = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  //调用基类构造函数</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> Base = <span class="keyword">this</span>.Type.Base;  <span class="comment">//获取当前对象的基类  </span></span><br><span class="line">    <span class="keyword">if</span>(!Base.Base)  <span class="comment">//若基类已没有基类</span></span><br><span class="line">        Base.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)     <span class="comment">//则直接调用基类构造函数</span></span><br><span class="line">    <span class="keyword">else</span>    <span class="comment">//若基类还有基类         </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.base = MakeBase(Base);     <span class="comment">//先覆写this.base</span></span><br><span class="line">        Base.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);    <span class="comment">//再调用基类构造函数</span></span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.base;               <span class="comment">//删除覆写的base属性</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MakeBase</span>(<span class="params">Type</span>) //包装基类构造函数</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Base = Type.Base;</span><br><span class="line">        <span class="keyword">if</span>(!Base.Base) <span class="keyword">return</span> Base; <span class="comment">//基类已无基类，就无需包装</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)   //包装为引用临时变量<span class="title">Base</span>的闭包函数</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.base = MakeBase(Base);     <span class="comment">//先覆写this.base</span></span><br><span class="line">            Base.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);    <span class="comment">//再调用基类构造函数</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//语法甘露的应用效果：    </span></span><br><span class="line"><span class="keyword">var</span> Person = Class      <span class="comment">//默认派生自object基本类</span></span><br><span class="line">(&#123;</span><br><span class="line">    Create: <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base();    <span class="comment">//调用上层构造函数</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;,</span><br><span class="line">    SayHello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        alert(<span class="string">"Hello, I'm "</span> + <span class="keyword">this</span>.name + <span class="string">", "</span> + <span class="keyword">this</span>.age + <span class="string">" years old."</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)    //覆写<span class="title">toString</span>方法</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Employee = Class(Person,    <span class="comment">//派生自Person类</span></span><br><span class="line">&#123;</span><br><span class="line">    Create: <span class="function"><span class="keyword">function</span>(<span class="params">name, age, salary</span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base(name, age);  <span class="comment">//调用基类的构造函数</span></span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;,</span><br><span class="line">    ShowMeTheMoney: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span> + <span class="string">" $"</span> + <span class="keyword">this</span>.salary); <span class="comment">//这里直接引用this将隐式调用toString()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> BillGates = <span class="keyword">new</span> Person(<span class="string">"Bill Gates"</span>, <span class="number">53</span>);</span><br><span class="line"><span class="keyword">var</span> SteveJobs = <span class="keyword">new</span> Employee(<span class="string">"Steve Jobs"</span>, <span class="number">53</span>, <span class="number">1234</span>);</span><br><span class="line">alert(BillGates);   <span class="comment">//这里将隐式调用覆写后的toString()方法</span></span><br><span class="line">BillGates.SayHello();</span><br><span class="line">SteveJobs.SayHello();</span><br><span class="line">SteveJobs.ShowMeTheMoney();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> LittleBill = <span class="keyword">new</span> BillGates.Type(<span class="string">"Little Bill"</span>, <span class="number">6</span>); <span class="comment">//用BillGate的类型建LittleBill</span></span><br><span class="line">LittleBill.SayHello();</span><br><span class="line"></span><br><span class="line">alert(BillGates.isA(Person));       <span class="comment">//true</span></span><br><span class="line">alert(BillGates.isA(Employee));     <span class="comment">//false</span></span><br><span class="line">alert(SteveJobs.isA(Person));       <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>参考资料：</p>
<p>悟透JavaScript</p>
<p><a href="http://www.cnblogs.com/leadzen/archive/2008/02/25/1073404.html" target="_blank" rel="external">http://www.cnblogs.com/leadzen/archive/2008/02/25/1073404.html</a></p>
<p>悟透JavaScript 之 甘露模型（新）</p>
<p><a href="http://www.cnblogs.com/leadzen/archive/2008/06/04/1213090.html" target="_blank" rel="external">http://www.cnblogs.com/leadzen/archive/2008/06/04/1213090.html</a> </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5笔记-地理定位]]></title>
      <url>http://xuzhibin.com/2011/11/03/h5-location/</url>
      <content type="html"><![CDATA[<p>地理定位（Geolocation）是一个可以获取到客户端经纬度等地理位置信息的API。<br>API本身是不知道客户端地理信息的，常见的地理位置信息来源有全球定位系统(GPS)和从网络信号中推断出的地理信息（如IP地址, RFID, WIFI, 蓝牙MAC地址, GSM/CDMA手机id,以及用户输入的信息 ）</p>
<p>先来了解下Geolocation API：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回地理定位对象</span></span><br><span class="line"><span class="keyword">var</span> geo = navigator.geolocation;</span><br><span class="line"><span class="comment">/*</span><br><span class="line">*方法,获取当前客户端地理位置</span><br><span class="line">*有三个参数可以用</span><br><span class="line">*successCallback：必需,函数,获取成功后的回调函数</span><br><span class="line">*errorCallback：可选,函数,失败时的回调函数</span><br><span class="line">*options：可选,对象字面量,有三个值可设定：</span><br><span class="line">*         enableHighAccuracy：是否启用高精度设备（高精度设备包含但不局限于前面所提到的 GPS 和 WIFI）</span><br><span class="line">*         maximumAge：数值,如果将其定义为负数或者未定义，会重设为0</span><br><span class="line">*         timeout：数值,请求获取地理信息时的超时时间，如果将其定义为负数会重设为0，如果未定义则不启用超时判断 </span><br><span class="line">*/</span></span><br><span class="line">geo.getCurrentPosition(successCallback,errorCallback,options);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line">  *方法,持续监控当前客户端地理位置（实时）</span><br><span class="line">  *返回该watchPosition的id*参数同getCurrentPosition</span><br><span class="line">  */</span></span><br><span class="line"><span class="keyword">var</span> watchGEO = geo.watchPosition(successCallback,errorCallback,options);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*方法,结束指定ID的watchPosition*/</span></span><br><span class="line">geo.clearWatch(watchId);</span><br></pre></td></tr></table></figure>
<p>使用地理定位API需要获得用户的许可，如果没有，会执行errorCallback；</p>
<p>watchPosition的successCallback只有在获取到的实时地理位置和之前有较大不同时才会执行；</p>
<p>getCurrentPosition和watchPosition的successCallback都有一个position参数，它包含有详细的地理信息如经纬度：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">geo.getCurrentPosition(<span class="function"><span class="keyword">function</span> (<span class="params">pos</span>) </span>&#123;<span class="comment">//成功获取时执行        </span></span><br><span class="line">     <span class="keyword">var</span> coord = pos.coords,        <span class="comment">//坐标detail             </span></span><br><span class="line">     accuracy = coord.accuracy,    <span class="comment">//精准度，单位为米             </span></span><br><span class="line">     latitude = coord.latitude,       <span class="comment">//纬度             </span></span><br><span class="line">     longitude = coord.longitude,  <span class="comment">//经度             </span></span><br><span class="line">     altitudeAccuracy = coord.altitudeAccuracy,        <span class="comment">//高度精确度，单位为米             </span></span><br><span class="line">     heading = coord.heading,        <span class="comment">//移动的方向            </span></span><br><span class="line">     speed = coord.speed;        <span class="comment">//速度         </span></span><br><span class="line">     showLocationInfo(coord,‘map’);        <span class="comment">//显示坐标信息        </span></span><br><span class="line">     showMap(coord,‘map’);        <span class="comment">//显示google地图</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;<span class="comment">//获取失败时执行        </span></span><br><span class="line">     alert(‘error:’+error.message+‘\n\n无法获得您的地理位置：’);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>取到经纬度就可以利用各map服务商的app来显示地图，如google map</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5笔记-离线应用]]></title>
      <url>http://xuzhibin.com/2011/11/03/h5-offlineapp/</url>
      <content type="html"><![CDATA[<p>为了能够让用户在离线状态下继续访问 Web 应用，需要一种方式来指明应用程序离线工作时所需的资源文件。这样，浏览器才能在在线状态时，把这些文件缓存到本地。此后，当用户离线访问应用程序时，这些资源文件会自动加载，从而让用户正常使用。HTML5 中，通过 cache manifest 文件指明需要缓存的资源，并支持自动和手动两种缓存更新方式。</p>
<p>开发者需要提供一个 cache manifest 文件。这个文件中列出了所有需要在离线状态下使用的资源，浏览器会把这些资源缓存到本地。</p>
<p>我们通过 W3C 提供的示例来说明。Clock Web 应用由三个文件“clock.html”、“clock.css”和“clock.js”组成。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- clock.html --&gt;</span> </span><br><span class="line"> <span class="tag">&lt; !<span class="attr">DOCTYPE</span> <span class="attr">HTML</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Clock<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"clock.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"clock.css"</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">link</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The time is: <span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">"clock"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"> /* clock.css */ </span><br><span class="line"> output &#123; font: 2em sans-serif; &#125; </span><br><span class="line"></span><br><span class="line"> /* clock.js */ </span><br><span class="line"> setTimeout(function () &#123; </span><br><span class="line">    document.getElementById('clock').value = new Date(); </span><br><span class="line"> &#125;, 1000);</span><br></pre></td></tr></table></figure>
<p>当用户在离线状态下访问“clock.html”时，页面将无法展现。为了支持离线访问，开发者必须添加 cache manifest 文件，指明需要缓存的资源。这个例子中的 cache manifest 文件为“clock.manifest”，它声明了 3 个需要缓存的资源文件“clock.html”、“clock.css”和“clock.js”。<br>clock.manifest 代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST </span><br><span class="line"> clock.html </span><br><span class="line"> clock.css </span><br><span class="line"> clock.js</span><br></pre></td></tr></table></figure>
<p>添加了 cache manifest 文件后，还需要修改“clock.html”，把 标签的 manifest 属性设置为“clock.manifest”。修改后的“clock.html”代码如下。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- clock.html --&gt;</span> </span><br><span class="line"> <span class="tag">&lt; !<span class="attr">DOCTYPE</span> <span class="attr">HTML</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"clock.manifest"</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Clock<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"clock.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"clock.css"</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">link</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The time is: <span class="tag">&lt;<span class="name">output</span> <span class="attr">id</span>=<span class="string">"clock"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改后，当用户在线访问“clock.html”时，浏览器会缓存“clock.html”、“clock.css”和“clock.js”文件；而当用户离线访问时，这个 Web 应用也可以正常使用了。</p>
<p><strong>注意：</strong></p>
<p>manifest文件的MIME-type必须是text/cache-manifest （需要服务器端设置）</p>
<p>在测试中发现，各浏览器更新缓存的机制各异：chrome修改manifest就可以更新缓存了，但却无法加载manifest之外的资源；而firefox需要手动删除本地缓存数据。<br>种种的这些兼容性问题，可以给NETWORK添加上通配符*来修正：</p>
<p>NETWORK:*</p>
<p>具体的原因可能是在启用离线应用后浏览器不会加载manifest设定之外的资源；而且firefox等也把manifest文件给缓存了，导致无法获取最新的manifest资源列表。</p>
<p><strong>下面说明书写 cache manifest 文件需要遵循的格式。</strong></p>
<p>首行必须是 CACHE MANIFEST。</p>
<p>其后，每一行列出一个需要缓存的资源文件名。</p>
<p>需要注意的是一行一个文件，也可以使用绝对路径或者URLs。</p>
<p>可根据需要列出在线访问的白名单。白名单中的所有资源不会被缓存，在使用时将直接在线访问。声明白名单使用 NETWORK：标识符。</p>
<p>如果在白名单后还要补充需要缓存的资源，可以使用 CACHE：标识符。</p>
<p>如果要声明某 URI 不能访问时的替补 URI，可以使用 FALLBACK：标识符。其后的每一行包含两个 URI，当第一个 URI 不可访问时，浏览器将尝试使用第二个 URI。</p>
<p>注释要另起一行，以 # 号开头。</p>
<p>cache manifest 中各类标识符的使用示例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST </span><br><span class="line"> # 上一行是必须书写的。</span><br><span class="line"></span><br><span class="line"> images/sound-icon.png </span><br><span class="line"> images/background.png </span><br><span class="line"></span><br><span class="line"> NETWORK: </span><br><span class="line"> comm.cgi</span><br><span class="line"># 下面是另一些需要缓存的资源，在这个示例中只有一个 css 文件。</span><br><span class="line"></span><br><span class="line"> CACHE: </span><br><span class="line"> style/default.css </span><br><span class="line"></span><br><span class="line"> FALLBACK: </span><br><span class="line"> /files/projects /projects</span><br></pre></td></tr></table></figure>
<p>应用程序可以等待浏览器自动更新缓存，也可以使用 Javascript 接口手动触发更新。</p>
<p><strong>1.自动更新</strong></p>
<p>浏览器除了在第一次访问 Web 应用时缓存资源外，只会在 cache manifest 文件本身发生变化时更新缓存。而 cache manifest 中的资源文件发生变化并不会触发更新<br>。<br><strong>2.手动更新</strong></p>
<p>开发者也可以使用 window.applicationCache 的接口更新缓存。方法是检测 window.applicationCache.status 的值，如果是 UPDATEREADY，那么可以调用 window.applicationCache.update() 更新缓存。</p>
<p><strong>现在来了解下离线应用的API：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*当前文档的ApplicationCache对象*/</span> </span><br><span class="line"><span class="keyword">var</span> cache = <span class="built_in">window</span>.applicationCache;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *当前worker的ApplicationCache对象*worker在本文第五节介绍</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">var</span> cache = self.applicationCache;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *属性,返回当前离线应用的状态</span><br><span class="line"> * UNCACHED (数值0)：未启用离线应用</span><br><span class="line"> * IDLE (数值1)：已开启离线应用，但本地缓存的资源是最新的，并且未标记为废弃资源</span><br><span class="line"> * CHECKING (数值2)：当前更新缓存的状态为“检查中”</span><br><span class="line"> * DOWNLOADING (数值3)：当前更新缓存的状态为“下载资源中”</span><br><span class="line"> * UPDATEREADY (数值4)：当前更新缓存的状态为“更新完毕”</span><br><span class="line"> * OBSOLETE (数值5)：已开启离线应用，但缓存资源都已标记为废弃</span><br><span class="line">*/</span></span><br><span class="line">cache.status</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *方法,下载资源到本地</span><br><span class="line"> *如果没有cache需要更新，则抛出 INVALID_STATE_ERR 异常</span><br><span class="line"> */</span></span><br><span class="line">cache.update();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *方法,更新缓存到最新的资源</span><br><span class="line"> *如果没有新的资源，则抛出INVALID_STATE_ERR异常</span><br><span class="line"> *并不会使本次加载的页面立即重新加载资源，仅有在执行该方法后刷新页面才能看到最新的资源。</span><br><span class="line"> */</span></span><br><span class="line">cache.swapCache();</span><br></pre></td></tr></table></figure>
<p>事件处理器：</p>
<p>checkingEvent 检查是否需要更新，或者在第一次下载manifest文件时。 最先执行的事件。</p>
<p>noupdateEvent manifest 文件未修改，不需要更新。Last event in sequence.</p>
<p>downloadingEvent 需要更新缓存，或者第一次下载资源时。</p>
<p>progressProgressEvent 下载资源中。</p>
<p>cachedEvent 资源已下载完成，并且已完成缓存最后的事件。</p>
<p>updatereadyEvent 资源更新完毕，并且可以用swapCache()来启用新的缓存。最后的事件。</p>
<p>obsoleteEvent 加载manifest文件时遇到401或404错误，所以缓存将被删除。最后的事件。</p>
<p>errorEvent 加载manifest文件时遇到401或404错误，将中断缓存网页。最后的事件。</p>
<p>支持浏览器：Firefox 3.0, Safari 4.0, Chrome 5.0, Opera 10.6</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML5笔记-web本地存储]]></title>
      <url>http://xuzhibin.com/2011/11/03/h5-storage/</url>
      <content type="html"><![CDATA[<p>Web Storage就是放大版的cookie——提供了比cookie更大的本地存储，并且不会向服务器发出请求，并提供了一些API。总之本地存储能更专业地处理本地数据。<br>可以像对象字面量那样使用Web Storage：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">localStorage.fresh = <span class="string">"vfresh.org"</span>; <span class="comment">//设置一个键值</span></span><br><span class="line"><span class="keyword">var</span> a = localStorage.fresh; <span class="comment">//获取键值</span></span><br><span class="line"><span class="keyword">delete</span> localStorage[<span class="string">'fresh'</span>] <span class="comment">//删除键值</span></span><br></pre></td></tr></table></figure>
<p>或者使用它的API：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空storage</span></span><br><span class="line">localStorage.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置一个键值</span></span><br><span class="line">localStorage.setItem(<span class="string">"fresh"</span>,<span class="string">"vfresh.org"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个键值</span></span><br><span class="line">localStorage.getItem(<span class="string">"fresh"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//return "vfresh.org"</span></span><br><span class="line"><span class="comment">//获取指定下标的键的名称（如同Array）</span></span><br><span class="line">localStorage.key(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//return "fresh"</span></span><br><span class="line"><span class="comment">//删除一个键值</span></span><br><span class="line">localStorage.removeItem(<span class="string">"fresh"</span>);</span><br></pre></td></tr></table></figure>
<p>字面量方式比API更高效，也更方便，所以你懂的。</p>
<p>localStorage是永久性的保存，而sessionStorage在浏览器窗口关闭后就没有了（相当于Expire=0的cookie）。</p>
<p>支持浏览器：IE 8+, Firefox 3.0+, Safari 4.0+, Chrome 4.0+, Opera 10.5+</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iptables封ip段的一些常见命令]]></title>
      <url>http://xuzhibin.com/2011/05/18/iptables-blockip/</url>
      <content type="html"><![CDATA[<p>linux下使用iptables封ip段的一些常见命令：</p>
<p><strong>封单个IP的命令</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT <span class="_">-s</span> 211.1.0.0 -j DROP</span><br></pre></td></tr></table></figure>
<p><strong>封IP段的命令</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT <span class="_">-s</span> 211.1.0.0/16 -j DROP</span><br><span class="line">iptables -I INPUT <span class="_">-s</span> 211.2.0.0/16 -j DROP</span><br><span class="line">iptables -I INPUT <span class="_">-s</span> 211.3.0.0/16 -j DROP</span><br></pre></td></tr></table></figure>
<p><strong>封整个段的命令</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT <span class="_">-s</span> 211.0.0.0/8 -j DROP</span><br></pre></td></tr></table></figure>
<p><strong>封几个段的命令</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT <span class="_">-s</span> 61.37.80.0/24 -j DROP</span><br><span class="line">iptables -I INPUT <span class="_">-s</span> 61.37.81.0/24 -j DROP</span><br></pre></td></tr></table></figure>
<p><strong>封80端口</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp –dport 80 <span class="_">-s</span> 124.115.0.0/24 -j DROP</span><br></pre></td></tr></table></figure>
<p><strong>解封的话</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -D INPUT <span class="_">-s</span> IP地址 -j REJECT</span><br><span class="line">iptables -F 全清掉了</span><br></pre></td></tr></table></figure>
<p>如果想开机就自动封锁某个IP，那就编辑/etc/sysconfig/iptables文件，添加一行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-I INPUT <span class="_">-s</span> IP地址 -j DROP</span><br></pre></td></tr></table></figure>
<p>然后执行/etc/init.d/iptables restart重启iptables。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网页正文提取算法研究[非正则]]]></title>
      <url>http://xuzhibin.com/2010/11/11/text-extraction/</url>
      <content type="html"><![CDATA[<p>互联网的页面展现形式相当丰富，但是如果按页面结构特征来分类，却不外乎以下几种类型：首页（包括栏目首页），列表页，内容页，评论页。</p>
<p>(1) <strong>首页: </strong>网站的首页, 一般含有多个栏目、图片、动画,以及若干文章标题链接。如: 网易首页。</p>
<p>(2) <strong>列表页:</strong> 信息以列表的方式给出, 一般以表格的形式列出若干个条目, 经常含有分页功能。例如: 某论坛版面的文章标题列表。</p>
<p>(3) <strong>内容页:</strong> 指含有正文内容的底层网页, 一般只含有不超过一篇的文章内容, 无评论或评论较少。如: 各类网站的含有具体某篇文章的底层网页。</p>
<p>(4) <strong>评论页: </strong>除了含有正文, 正文后面还跟有若干个评论,以论坛为代表。</p>
<p>在这几种类型之中，信息含量最大的当数内容页，它是我们平常摄取信息的主要来源。由于内容页的重要性，不同的Web站点为了加强内容页的展示，都会加入一些与内容相关或无关的信息块，如导航，广告等。虽然这些信息块在一定程度上有助于我们的延伸阅读，但很多情况下，我们只需要获取正文信息就可以了，其他信息块反倒成了一种干扰。如何从一个内容页面中，正确提取出正文信息，就成了一个研究课题。</p>
<p>在详述之前，先说一下正文提取的意义。以笔者的经历看来，应用包括但不限于以下几个方面。</p>
<p>(1) <strong>采集，搜索。</strong>信息采集很常见，互联网上超过30%的内容都是从其他Web站点采集而来。现在的采集系统或工具，大多是基于页面的正则来进行信息采集的，这样的优点是，对于需要采集的信息精确度很高，但是缺点也是很明显的，由于是基于页面的Html源码来采集，一旦源站点改版或调整，导致页面的Html源码改变，所有正则将全部作废。而正文提取技术，不是以Html源码格式为依据，所以Html源码的改变相对来说影响不大。</p>
<p>(2) <strong>门户文章发布。</strong>很多门户站点，并没有专门的记者团队，大部分文章都靠编辑在网上复制粘贴。如果能在发布界面加个功能，只需要输入网址，即可正确导入正文内容，并自动处理图片，想必是个不错的用户体验。</p>
<p>(3)<strong>Wap浏览器。</strong>Wap浏览由于受到流量及手机屏幕的限制，现在的Wap页面大部分以特出文字信息为主，但也不排除会有一些干扰信息块出现。作为用户，希望能只显示正文信息，特别是对于新闻及小说等页面。Wap浏览器如果可以将正文内容自动提取出来，应该是个不错功能。Android系统的迷人浏览器有个阅读模式，算是在这方面的一个探索。</p>
<p>正文提取技术的算法很多，本文是基于多特征的一种算法研究，根据信息块的特征进行判定。内容页又称为主题页，主题内容通常可以分解层次为: ①标题; ②发布时间; ③内容正文; ④相关文章或延伸性阅读。除了“内容正文”为必须元素外，其他几个元素都不一定会在内容页出现。根据对大量不同网页观察，各个元素的位置及表现形式虽无固定的标准，但是大部分却满足一定的特征。</p>
<p><strong>一．标题块</strong></p>
<ul>
<li>分块节点：td，div，h，span</li>
<li>一般位于Head/Title的位置</li>
<li>当前单元含有<code>&lt;h1&gt;</code>-<code>&lt;h3&gt;</code>，<code>&lt;b&gt;</code>，<code>&lt;i&gt;</code>，<code>&lt;strong&gt;</code>等标签</li>
<li>样式，一般class包含title，head等字符</li>
<li>文字长度，一般大于3个字符，小于35个字符</li>
</ul>
<p><strong>二．发表时间块</strong></p>
<ul>
<li>分块节点：td，div， span</li>
<li>文字长度，一般小于50个字符</li>
<li>包含日期格式（2010-08-09）的字符串</li>
<li>包含以下关键字：来源，发表</li>
</ul>
<p><strong>三．主题块</strong></p>
<ul>
<li>分块节点：td，div</li>
<li>HTML网页中有一些特殊标签，通常只出现在网页主题块中，如<code>&lt;P&gt;</code> <code>&lt;BR&gt;</code>等。因此，主题块中往往包含着特殊标签。</li>
<li>主题块内容含有较多的句子，因此具有较多逗号、句号等标点符号（&gt;5）。</li>
<li>若从信息量角度考虑，主题块一般是含有较多文字信息。</li>
<li>主题块的 标签密度=1000*标签数/文字数 应在小于一个范围。</li>
<li>主题块的 文本密度=len(文本)/len(HTML代码) 较大</li>
<li>不应该包含 “上一篇”，“下一篇”</li>
<li>包含以下字符串的内容块，判定为包含版权信息，需减权：“ICP备04000001号”，“版权所有”，“Copyright”</li>
<li>主题块序号在标题块之下</li>
<li>主题块序号在发表时间块之下</li>
<li>主题块序号在相关链接块之上</li>
</ul>
<p><strong>四．相关链接块</strong></p>
<ul>
<li>分块节点：td，div</li>
<li>文字应为“相关链接”、“相关新闻”、“相关报道”等敏感词，且连接比例很高。</li>
<li>链接数小于20</li>
</ul>
<p><strong>实现：</strong></p>
<p>根据以上信息块特征，采用特征提权算法，C#（3.5）编程实现，命名为QD正文提取组件。经测试，对Html格式规范的以文字为主的内容页，正确提取率在85%以上，各大门户的新闻页面在95%以上。</p>
<p><a href="/uploads/text-extraction/SimpleExtract.rar">例子下载</a>(需要安装Microsoft .NET Framework 3.5)</p>
<p><img src="/uploads/text-extraction/2010-11-11_132022.gif" alt="正文提取例子"></p>
<blockquote>
<p>注：QD正文提取组件 不开源，需要源码的朋友可选择付费获取。</p>
</blockquote>
<p>例子程序最新版本为 1.0.4.0</p>
<blockquote>
<p><strong>所售源码包文件列表</strong></p>
<p>组件源代码1份 (C#)</p>
<p>例子程序1个 (源码，运行界面见上图)</p>
<p>正文提取相关论文，找人到学校收费论文库下的，压缩包大概几十M</p>
<p>CAJViewer软件1个，看某些论文需要用到。</p>
</blockquote>
<p><strong>针对近期部分朋友的咨询，答复如下：</strong></p>
<p>1.物价高涨，生活不容易，砍价亦麻烦，组件源码价格调整为￥300，此为底线，不再接受议价。</p>
<p>2.购买前，请先确定此组件对你是有价值的，以免浪费金钱。</p>
<p>3.由于程序源码的特殊性，不提供退货服务，请谅解。源码的效果与例子程序是一模一样的，请先下载例子程序测试，看看是否能满足你的要求，当然，你亦可通过对源码的修改（增改规则），以获得更好的效果。</p>
<p>4.程序的思路已写在此，时间比较充裕的朋友，建议自己编写程序。真需要购买的，偶亦很欢迎，但购买前请参照以上1~3条。</p>
<p>5.有意购买者，可联系Email：171630607@qq.com，QQ：171630607。<strong>请尊重劳动成果，勿传播源码。</strong></p>
<p>6.有朋友说，例子程序在WIN7 64bit上无法运行。经测试，例子程序在XP、WIN7 32bit可以运行，WIN7 64bit和WIN8 64bit不能运行。原因是例子程序做了加密处理，未经加密的源码在以上系统均可正常运行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lucene.Net入门基础]]></title>
      <url>http://xuzhibin.com/2010/06/13/lucenenet-getstart/</url>
      <content type="html"><![CDATA[<h1 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//索引</span></span><br><span class="line"><span class="function">Private <span class="keyword">void</span> <span class="title">Index</span>(<span class="params"></span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    IndexWriter writer = <span class="keyword">new</span> IndexWriter(<span class="string">@"E:\Index"</span>, <span class="keyword">new</span> StandardAnalyzer());</span><br><span class="line">    Document doc = <span class="keyword">new</span> Document();</span><br><span class="line">    doc.Add(<span class="keyword">new</span> Field(<span class="string">"Text"</span>,<span class="string">"哦耶,美丽的姑娘。"</span>, Field.Store.YES, Field.Index.TOKENIZED));</span><br><span class="line">    writer.AddDocument(doc);</span><br><span class="line">    writer.Close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//搜索</span></span><br><span class="line"><span class="function">Private <span class="keyword">void</span> <span class="title">Search</span>(<span class="params"><span class="keyword">string</span> words</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(<span class="string">@"E:\Index"</span>);</span><br><span class="line">    Query query = <span class="keyword">new</span> QueryParser(“Text”, <span class="keyword">new</span> StandardAnalyzer()).Parse(words);</span><br><span class="line">    Hits hits = searcher.Search(query);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hits.Length(); i++)</span><br><span class="line">        System.Console.WriteLine(hits.Doc(i).GetField(<span class="string">"Text"</span>).StringValue();</span><br><span class="line">    searcher.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="初识Lucene"><a href="#初识Lucene" class="headerlink" title="初识Lucene"></a>初识Lucene</h1><h2 id="Lucene是什么"><a href="#Lucene是什么" class="headerlink" title="Lucene是什么"></a>Lucene是什么</h2><p>Lucene是一个高性能的、可扩展的信息检索工具包。它只是Java类库，并不是现成的应用程序。它提供简单易用却十分强大的API接口，基于它你可以快速的构建功能强大的搜索程序（搜索引擎？）。当前最新版2.9.2.1。<br><img src="/uploads/lucenenet-getstart/2010-06-13_104150.gif" alt=""></p>
<h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h2><p>为了实现快速的搜索，Lucene会首先将需要处理的数据以一种称为倒排索引（Inverted Index）的数据结构进行存储。怎样理解倒排索引呢？简单的说，倒排索引并不是回答“这个文档中包含哪些单词？”这个问题，而是经过优化以后用来快速回答“哪些文档包含词XX？”这个问题。就像需要给书籍整理一份供快速查找的目录一样，Lucene也得为需要被搜索的数据整理优化出一份索引文件(Index file)，而这个过程称之为“索引”(Indexing)。</p>
<h2 id="Lucene的核心类"><a href="#Lucene的核心类" class="headerlink" title="Lucene的核心类"></a>Lucene的核心类</h2><p>索引过程：</p>
<p>IndexWriter Directory Analyzer Document Field</p>
<p>搜索过程：</p>
<p>IndexSearcher Term Query TermQuery Hits</p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h2 id="索引过程的流程图"><a href="#索引过程的流程图" class="headerlink" title="索引过程的流程图"></a>索引过程的流程图</h2><p><img src="/uploads/lucenenet-getstart/2010-06-13_104818.gif" alt=""><br>注:Lucene索引过程分为三个主要的操作阶段：将数据换转成文本、分析文本、并将分析过的文本保存到索引库中</p>
<h2 id="基本的索引操作"><a href="#基本的索引操作" class="headerlink" title="基本的索引操作"></a>基本的索引操作</h2><h3 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h3><p>Document </p>
<p>Field（理解Field的参数）</p>
<p>异构Document</p>
<p>追加域</p>
<p>增量索引</p>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><p>软删除，仅添加了删除标记。调用 IndexWriter.Optimize() 后真正删除。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">IndexReader reader = IndexReader.Open(directory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定序号(DocId)的 Document。</span></span><br><span class="line">reader.Delete(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除包含指定 Term 的 Document。</span></span><br><span class="line">reader.Delete(<span class="keyword">new</span> Term(FieldValue, <span class="string">"Hello"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复软删除。</span></span><br><span class="line">reader.UndeleteAll();</span><br><span class="line"></span><br><span class="line">reader.Close();</span><br></pre></td></tr></table></figure>
<h3 id="更新索引"><a href="#更新索引" class="headerlink" title="更新索引"></a>更新索引</h3><p>事实上，Lucene没有更新索引的方法</p>
<p>更新 = 删除 + 添加</p>
<p>提示：当删除和添加多个Document对象时，最好进行批量处理。这样做的速度总是比交替的删除和添加操作的速度快得多。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只需将 create 参数设为 false，即可往现有索引库添加新数据。</span></span><br><span class="line">Directory directory = FSDirectory.GetDirectory(<span class="string">"index"</span>, <span class="literal">false</span>);</span><br><span class="line">IndexWriter writer = <span class="keyword">new</span> IndexWriter(directory, analyzer, <span class="literal">false</span>);</span><br><span class="line">writer.AddDocument(doc1);</span><br><span class="line">writer.AddDocument(doc2);</span><br><span class="line">writer.Optimize();</span><br><span class="line">writer.Close();</span><br></pre></td></tr></table></figure>
<h2 id="加权-boosing"><a href="#加权-boosing" class="headerlink" title="加权(boosing)"></a>加权(boosing)</h2><p>可以给 Document 和 Field 增加权重(Boost)，使其在搜索结果排名更加靠前。缺省情况下，搜索结果以 Document.Score 作为排序依据，该数值越大排名越靠前。Boost 缺省值为 1。</p>
<p><strong>Score = Score * Boost</strong></p>
<p>通过上面的公式，我们就可以设置不同的权重来影响排名。<br>如下面的例子中根据 VIP 级别设定不同的权重。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Document document = <span class="keyword">new</span> Document();</span><br><span class="line"><span class="keyword">switch</span> (vip)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">case</span> VIP.Gold: document.SetBoost(<span class="number">2</span>F); <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> VIP.Argentine: document.SetBoost(<span class="number">1.5</span>F); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只要 Boost 足够大，那么就可以让某个命中结果永远排第一位，这就是百度等网站的”收费排名”业务。</p>
<h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><p>从指定目录打开已有索引库。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Directory directory = FSDirectory.GetDirectory(<span class="string">"c:\index"</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>将索引库载入内存，以提高搜索速度。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Directory directory = <span class="keyword">new</span> RAMDirectory(FSDirectory.GetDirectory(<span class="string">@"c:\index"</span>, <span class="literal">false</span>));</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line"><span class="comment">//private Directory directory = new RAMDirectory(c:\index");</span></span><br></pre></td></tr></table></figure>
<p>注意 FSDirectory.GetDirectory 的 create 参数，为 true 时将删除已有索引库文件，可以通过 IndexReader.IndexExists() 方法判断。</p>
<h2 id="合并索引库"><a href="#合并索引库" class="headerlink" title="合并索引库"></a>合并索引库</h2><p>将 directory1 合并到 directory2 中。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Directory directory1 = FSDirectory.GetDirectory(<span class="string">"index1"</span>, <span class="literal">false</span>);</span><br><span class="line">Directory directory2 = FSDirectory.GetDirectory(<span class="string">"index2"</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">IndexWriter writer = <span class="keyword">new</span> IndexWriter(directory2, analyzer, <span class="literal">false</span>);</span><br><span class="line">writer.AddIndexes(<span class="keyword">new</span> Directory[] &#123; directory &#125;);</span><br><span class="line">Console.WriteLine(writer.DocCount());</span><br><span class="line">writer.Close();</span><br></pre></td></tr></table></figure>
<h2 id="优化索引"><a href="#优化索引" class="headerlink" title="优化索引"></a>优化索引</h2><ol>
<li>很简单，一个writer.Optimize()搞定，优化过程会降低索引的效率，优化结果提高搜索性能。不要时时Optimize()，优化一次就够了</li>
<li></li>
<li>批量向 FSDirectory 增加索引时，增大合并因子(mergeFactor )和最小文档合并数(minMergeDocs)有助于提高性能，减少索引时间。</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">IndexWriter writer = <span class="keyword">new</span> IndexWriter(directory, analyzer, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">writer.maxFieldLength = <span class="number">1000</span>; <span class="comment">// 字段最大长度</span></span><br><span class="line">writer.mergeFactor = <span class="number">1000</span>;</span><br><span class="line">writer.minMergeDocs = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Add Documentes...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">writer.Optimize();</span><br><span class="line">writer.Close();</span><br></pre></td></tr></table></figure>
<p>利用 Lucene，在创建索引的工程中你可以充分利用机器的硬件资源来提高索引的效率。当你需要索引大量的文件时，你会注意到索引过程的瓶颈是在往磁盘上写索引文件的过程中。为了解决这个问题, Lucene 在内存中持有一块缓冲区。但我们如何控制 Lucene 的缓冲区呢？幸运的是，Lucene 的类 IndexWriter 提供了三个参数用来调整缓冲区的大小以及往磁盘上写索引文件的频率。</p>
<p>（1）合并因子 (mergeFactor)</p>
<p>这个参数决定了在 Lucene 的一个索引块中可以存放多少文档以及把磁盘上的索引块合并成一个大的索引块的频率。比如，如果合并因子的值是 10，那么当内存中的文档数达到 10 的时候所有的文档都必须写到磁盘上的一个新的索引块中。并且，如果磁盘上的索引块的隔数达到 10 的话，这 10 个索引块会被合并成一个新的索引块。这个参数的默认值是 10，如果需要索引的文档数非常多的话这个值将是非常不合适的。对批处理的索引来讲，为这个参数赋一个比较大的值会得到比较好的索引效果。</p>
<p>（2）最小合并文档数 (minMergeDocs)</p>
<p>这个参数也会影响索引的性能。它决定了内存中的文档数至少达到多少才能将它们写回磁盘。这个参数的默认值是10，如果你有足够的内存，那么将这个值尽量设的比较大一些将会显著的提高索引性能。</p>
<p>（3）最大合并文档数 (maxMergeDocs)</p>
<p>这个参数决定了一个索引块中的最大的文档数。它的默认值是 Integer.MAX_VALUE，将这个参数设置为比较大的值可以提高索引效率和检索速度，由于该参数的默认值是整型的最大值，所以我们一般不需要改动这个参数。</p>
<h2 id="大数据量索引（并发性、多线程和锁机制）"><a href="#大数据量索引（并发性、多线程和锁机制）" class="headerlink" title="大数据量索引（并发性、多线程和锁机制）"></a>大数据量索引（并发性、多线程和锁机制）</h2><h3 id="多线程索引"><a href="#多线程索引" class="headerlink" title="多线程索引"></a>多线程索引</h3><p>共享对象（注：一个IndexWriter或IndexReader对象可以被多个线程所共享）<br>巧用RAMDirectory</p>
<h3 id="安全锁"><a href="#安全锁" class="headerlink" title="安全锁"></a>安全锁</h3><p>Lucene使用基于文件的锁<br>write.lock<br>禁用索引锁 (disableLuceneLocks=true)</p>
<h3 id="并发访问的规则"><a href="#并发访问的规则" class="headerlink" title="并发访问的规则"></a>并发访问的规则</h3><p>任意数量的只读操作都可以同时执行。<br>在索引正在被修改时，我们也可以同时执行任意数量的只读操作。<br>在某一时刻，只允许执行一个修改索引的操作。</p>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h2 id="IndexSearcher"><a href="#IndexSearcher" class="headerlink" title="IndexSearcher"></a>IndexSearcher</h2><p>通过IndexSearcher执行搜索</p>
<p>两种构建IndexSearcher对象的方法： Directory对象与文件路径。 (前者是推荐的)<br>Search()方法</p>
<h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><h3 id="创建Query对象"><a href="#创建Query对象" class="headerlink" title="创建Query对象"></a>创建Query对象</h3><p>使用QueryParset构建Query对象。（注：QueryParset把查询表达式转换成Lucene内置的查询类型。）</p>
<p>几个常用的内置类型：TermQuery、RangeQuery、PrefixQuery、BooleanQuery。</p>
<h3 id="强悍的QueryParser"><a href="#强悍的QueryParser" class="headerlink" title="强悍的QueryParser"></a>强悍的QueryParser</h3><p>Query类的toString()方法<br>布尔查询 （AND、 OR、 NOT） 例：a AND b(+a +b) a OR b(a b) a AND NOT b(+a -b)</p>
<p>组合查询 圆括号”()” 例： (a OR b) AND c</p>
<p>域的选择 例：tag:美女</p>
<p>范围查询 [ TO ] 和{ TO } 例：price:[100 TO 200] price:{100 TO 200}</p>
<p>……</p>
<p>(注：强悍，但不建议使用它)</p>
<h2 id="Hits"><a href="#Hits" class="headerlink" title="Hits"></a>Hits</h2><h3 id="使用Hits对象访问搜索结果"><a href="#使用Hits对象访问搜索结果" class="headerlink" title="使用Hits对象访问搜索结果"></a>使用Hits对象访问搜索结果</h3><h3 id="Hits类的几个方法"><a href="#Hits类的几个方法" class="headerlink" title="Hits类的几个方法"></a>Hits类的几个方法</h3><p>Length()    Hits对象集合中所包含的文档的数量</p>
<p>Document(n) 排名第n的Document实例</p>
<p>Id(n)    排名第n的DocumentID</p>
<p>Score(n)    排名第n的标准分值</p>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="使用Sort对象排序"><a href="#使用Sort对象排序" class="headerlink" title="使用Sort对象排序"></a>使用Sort对象排序</h3><p>通过 SortField 的构造参数，我们可以设置排序字段，排序条件，以及倒排。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sort sort = <span class="keyword">new</span> Sort(<span class="keyword">new</span> SortField(FieldName, SortField.DOC, <span class="literal">false</span>));</span><br><span class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</span><br><span class="line">Hits hits = searcher.Search(query, sort);</span><br></pre></td></tr></table></figure>
<h3 id="按照索引顺序-索引时的文档ID-排序"><a href="#按照索引顺序-索引时的文档ID-排序" class="headerlink" title="按照索引顺序(索引时的文档ID)排序"></a>按照索引顺序(索引时的文档ID)排序</h3><p>使用Sort.INDEXORDER作为参数</p>
<h3 id="多域排序"><a href="#多域排序" class="headerlink" title="多域排序"></a>多域排序</h3><h3 id="排序对性能的影响"><a href="#排序对性能的影响" class="headerlink" title="排序对性能的影响"></a>排序对性能的影响</h3><p>排序对搜索速度影响还是很大的，尽可能不要使用多个排序条件。</p>
<p>建议：采用默认的积分排序,设计良好的加权机制</p>
<h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><p>过滤(Filtering)是Lucene中用于缩小搜索空间的一种机制。</p>
<p>DateFliter 只限于指定日期域的值在某一时间范围</p>
<p>QueryFilter 把查询作果作为另一个新查询可搜索的文档空间。</p>
<p>建议：过滤器采取的是对搜索结果的再处理方式，会使程序的性能显著下降，一般推荐使用BooleanQuery组合更多的搜索条件来达成效果。</p>
<p>例子：</p>
<p>我们搜索上架时间在 2005-10-1 到 2005-10-30 之间的商品。</p>
<p>对于日期时间，我们需要转换一下才能添加到索引库，同时还必须是索引字段。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index</span></span><br><span class="line">document.Add(FieldDate, DateField.DateToString(date), Field.Store.YES, Field.Index.UN_TOKENIZED);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">// search</span></span><br><span class="line">Filter filter = <span class="keyword">new</span> DateFilter(FieldDate, DateTime.Parse(<span class="string">"2005-10-1"</span>), DateTime.Parse(<span class="string">"2005-10-30"</span>));</span><br><span class="line">Hits hits = searcher.Search(query, filter);</span><br></pre></td></tr></table></figure>
<p>除了日期时间，还可以使用整数。比如搜索价格在 100 ~ 200 之间的商品。</p>
<p>Lucene.Net NumberTools 对于数字进行了补位处理，如果需要使用浮点数可以自己参考源码进行。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index</span></span><br><span class="line">document.Add(<span class="keyword">new</span> Field(FieldNumber, NumberTools.LongToString((<span class="keyword">long</span>)price), Field.Store.YES, Field.Index.UN_TOKENIZED));</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="comment">// search</span></span><br><span class="line">Filter filter = <span class="keyword">new</span> RangeFilter(FieldNumber, NumberTools.LongToString(<span class="number">100</span>L), NumberTools.LongToString(<span class="number">200</span>L), <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">Hits hits = searcher.Search(query, filter);</span><br><span class="line">使用 Query 作为过滤条件。</span><br><span class="line"></span><br><span class="line">QueryFilter filter = <span class="keyword">new</span> QueryFilter(QueryParser.Parse(<span class="string">"name2"</span>, FieldValue, analyzer));</span><br></pre></td></tr></table></figure>
<p>我们还可以使用 FilteredQuery 进行多条件过滤。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Filter filter = <span class="keyword">new</span> DateFilter(FieldDate, DateTime.Parse(<span class="string">"2005-10-10"</span>), DateTime.Parse(<span class="string">"2005-10-15"</span>));</span><br><span class="line">Filter filter2 = <span class="keyword">new</span> RangeFilter(FieldNumber, NumberTools.LongToString(<span class="number">11</span>L), NumberTools.LongToString(<span class="number">13</span>L), <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">Query query = QueryParser.Parse(<span class="string">"name*"</span>, FieldName, analyzer);</span><br><span class="line">query = <span class="keyword">new</span> FilteredQuery(query, filter);</span><br><span class="line">query = <span class="keyword">new</span> FilteredQuery(query, filter2);</span><br><span class="line"></span><br><span class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</span><br><span class="line">Hits hits = searcher.Search(query);</span><br></pre></td></tr></table></figure>
<h2 id="多域搜索"><a href="#多域搜索" class="headerlink" title="多域搜索"></a>多域搜索</h2><p>使用MultiFieldQueryParser实现多域搜索</p>
<p>权重影响域的优先级，而不是域的使用顺序</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Query query = MultiFieldQueryParser.Parse(<span class="string">"name*"</span>, <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; FieldName, FieldValue &#125;, analyzer);</span><br><span class="line"></span><br><span class="line">IndexReader reader = IndexReader.Open(directory);</span><br><span class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</span><br><span class="line">Hits hits = searcher.Search(query);</span><br></pre></td></tr></table></figure>
<h2 id="组合搜索"><a href="#组合搜索" class="headerlink" title="组合搜索"></a>组合搜索</h2><p>除了使用 QueryParser.Parse 分解复杂的搜索语法外，还可以通过组合多个 Query 来达到目的。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Query query1 = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(FieldValue, <span class="string">"name1"</span>)); <span class="comment">//词语搜索</span></span><br><span class="line">Query query2 = <span class="keyword">new</span> WildcardQuery(<span class="keyword">new</span> Term(FieldName, <span class="string">"name*"</span>)); <span class="comment">//通配符 </span></span><br><span class="line">Query query3 = <span class="keyword">new</span> PrefixQuery(<span class="keyword">new</span> Term(FieldName, <span class="string">"name1"</span>)); <span class="comment">//字段搜索 Field:Keyword，自动在结尾添加 *</span></span><br><span class="line">Query query4 = <span class="keyword">new</span> RangeQuery(<span class="keyword">new</span> Term(FieldNumber, NumberTools.LongToString(<span class="number">11</span>L)), <span class="keyword">new</span> Term(FieldNumber, NumberTools.LongToString(<span class="number">13</span>L)), <span class="literal">true</span>); <span class="comment">//范围搜索</span></span><br><span class="line">Query query5 = <span class="keyword">new</span> FilteredQuery(query, filter); <span class="comment">//带过滤条件的搜索</span></span><br><span class="line">      </span><br><span class="line">BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</span><br><span class="line">query.Add(query1, BooleanClause.Occur.MUST);</span><br><span class="line">query.Add(query2, BooleanClause.Occur.MUST);</span><br><span class="line"></span><br><span class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</span><br><span class="line">Hits hits = searcher.Search(query);</span><br></pre></td></tr></table></figure>
<h2 id="分布搜索"><a href="#分布搜索" class="headerlink" title="分布搜索"></a>分布搜索</h2><p>我们可以使用 MultiReader 或 MultiSearcher 搜索多个索引库。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MultiReader reader = <span class="keyword">new</span> MultiReader(<span class="keyword">new</span> IndexReader[] &#123; IndexReader.Open(<span class="string">@"c:\index"</span>), IndexReader.Open(<span class="string">@"\\server\index"</span>) &#125;);</span><br><span class="line">IndexSearcher searcher = <span class="keyword">new</span> IndexSearcher(reader);</span><br><span class="line">Hits hits = searcher.Search(query);</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IndexSearcher searcher1 = <span class="keyword">new</span> IndexSearcher(reader1);</span><br><span class="line">IndexSearcher searcher2 = <span class="keyword">new</span> IndexSearcher(reader2);</span><br><span class="line">MultiSearcher searcher = <span class="keyword">new</span> MultiSearcher(<span class="keyword">new</span> Searchable[] &#123; searcher1, searcher2 &#125;);</span><br><span class="line">Hits hits = searcher.Search(query);</span><br></pre></td></tr></table></figure>
<p>还可以使用 ParallelMultiSearcher 进行多线程并行搜索。</p>
<h2 id="显示搜索语法字符串"><a href="#显示搜索语法字符串" class="headerlink" title="显示搜索语法字符串"></a>显示搜索语法字符串</h2><p>我们组合了很多种搜索条件，或许想看看与其对等的搜索语法串是什么样的。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</span><br><span class="line">query.Add(query1, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">query.Add(query2, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">Console.WriteLine(<span class="string">"Syntax: &#123;0&#125;"</span>, query.ToString());</span><br><span class="line">输出：</span><br><span class="line">Syntax: +(name:name* <span class="keyword">value</span>:name*) +number:[<span class="number">0000000000000000</span>b TO <span class="number">0000000000000000</span>d]</span><br></pre></td></tr></table></figure>
<h1 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h1><h2 id="何谓分析器"><a href="#何谓分析器" class="headerlink" title="何谓分析器"></a>何谓分析器</h2><p>分析(Analysis)，在Lucene当中指的是将域(Field)文本转换为最基本的索引单元——项(Term)的过程。</p>
<h2 id="内置的分析器"><a href="#内置的分析器" class="headerlink" title="内置的分析器"></a>内置的分析器</h2><p>KeywordAnalyzer<br>SimpleAnalyzer<br>StopAnalyzer<br>WhitespaceAnalyzer<br>StandardAnalyzer (最强大的了)</p>
<h2 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h2><p>官方没有自带的中文分词，可以选择第三方的开源中文分词，如盘古分词</p>
<p><a href="/uploads/lucenenet-getstart/LuceneDemo.rar">例子源码下载 SourceCode</a></p>
<p><img src="/uploads/lucenenet-getstart/2010-06-13_143107.gif" alt=""></p>
<p>PS：例子程序采用的的Lucene.Net版本为2.9.2.1，文中所举例子程序未必能兼容最新版本，用法请以例子程序为准。<br>例子程序采用的中文分词为盘古分词。其官网为<a href="http://pangusegment.codeplex.com/" target="_blank" rel="external">http://pangusegment.codeplex.com/</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h1><p>王振春同学的Lucene.Net培训资料<br>[Lucene.Net] 基本用法 <a href="http://www.rainsts.net/article.asp?id=313" target="_blank" rel="external">http://www.rainsts.net/article.asp?id=313</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CentOS安装crontab及使用方法]]></title>
      <url>http://xuzhibin.com/2010/06/05/install-crontab/</url>
      <content type="html"><![CDATA[<p>安装crontab:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS ~] yum install vixie-cron</span><br><span class="line">[root@CentOS ~] yum install crontabs</span><br></pre></td></tr></table></figure>
<p>说明：<br>vixie-cron软件包是cron的主程序；</p>
<p>crontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。</p>
<p>cron 是linux的内置服务，但它不自动起来，可以用以下的方法启动、关闭这个服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/sbin/service crond start <span class="comment">#启动服务</span></span><br><span class="line">/sbin/service crond stop <span class="comment">#关闭服务</span></span><br><span class="line">/sbin/service crond restart <span class="comment">#重启服务</span></span><br><span class="line">/sbin/service crond reload <span class="comment">#重新载入配置</span></span><br></pre></td></tr></table></figure>
<p>查看crontab服务状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond status</span><br></pre></td></tr></table></figure>
<p>手动启动crontab服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service crond start</span><br></pre></td></tr></table></figure>
<p>查看crontab服务是否已设置为开机启动，执行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntsysv</span><br></pre></td></tr></table></figure>
<p>加入开机自动启动:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --level 35 crond on</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[.Net下开发Windows Service]]></title>
      <url>http://xuzhibin.com/2010/02/28/net-winservice/</url>
      <content type="html"><![CDATA[<h1 id="Windows服务能做些什么？"><a href="#Windows服务能做些什么？" class="headerlink" title="Windows服务能做些什么？"></a>Windows服务能做些什么？</h1><p>Windows服务是这些后台程序、后台服务的正规名词。Windows服务的运行可以在没有用户干预的情况下，在后台运行，没有任何界面。通过Windows服务管理器进行管理。服务管理器也只能做些简单的操作：开始，暂停，继续，停止。Windows服务的特点：在后台运行，没有用户交互，可以随Windows启动而启动。</p>
<h1 id="如何实现Windows服务？"><a href="#如何实现Windows服务？" class="headerlink" title="如何实现Windows服务？"></a>如何实现Windows服务？</h1><p>下面按”隔一定时间做一些相同的事情”的服务为例，说明Windows服务如何实现。</p>
<p><strong>1.先按普通Windows程序设计好你的程序逻辑。 </strong></p>
<p>建立一个空白解决方案WindowsService.sln </p>
<p>添加Windows类库项目ServiceBLL.csproj</p>
<p>将Class1.cs改名为AppBLL.cs </p>
<p>添加一个方法Dothings()，这个方法用来每隔一段时间调用一次，做些周期性的事情。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ServiceBLL</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppBLL</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dothings</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//隔一段时间调用一次</span></span><br><span class="line">            LogHelper.WriteLog(<span class="string">"test"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2.向解决方案添加一个WindowsService.csproj </strong></p>
<p><img src="/uploads/net-winservice/2010-02-28_182839.png" alt=""></p>
<p>将Service1.cs重命名为Service.cs</p>
<p>给WindowsService添加ServiceBLL项目引用 </p>
<p>打开Service.cs代码视图，向Service类添加成员 </p>
<p>ServiceBLL.AppBLL appBLL; </p>
<p>在构造函数里面对appBLL实例化 </p>
<p>appBLL= new AppBLL (); </p>
<p>在using位置添加System.Theading </p>
<p>using System.Threading; </p>
<p>给Service类添加计时器</p>
<p>Timer serviceTimer; </p>
<p>添加TimeCallback方法，用于计时器调用</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TimerCallback</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">//隔一段时间调用一次</span></span><br><span class="line">    appBLL.Dothings();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在OnStart()方法中添加方法，用于启动计时器 </p>
<p>serviceTimer = new Timer(new TimerCallback(TimerCallback), state, 0, period); </p>
<p>此处，state用于保存状态，如果不需要，保存状态，可以传入null。第三个参数0表示立即调用TimerCallback方法，如果不需要立即调用，可以传入period。period是计时器的计时间隔，单位为毫秒。 </p>
<p>重载 OnPause ()和OnContinue ()方法，对计时器进行控制。</p>
<p>Service.cs代码如下</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ServiceProcess;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> ServiceBLL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Service</span> : <span class="title">ServiceBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Timer serviceTimer;</span><br><span class="line">        <span class="keyword">private</span> AppBLL appBLL;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> period;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">object</span> state;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Service</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">            appBLL = <span class="keyword">new</span> AppBLL();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStart</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//启动timer</span></span><br><span class="line">            period = <span class="number">10</span>*<span class="number">1000</span>;<span class="comment">//10秒，可从配置文件中获取</span></span><br><span class="line">            serviceTimer = <span class="keyword">new</span> Timer(<span class="keyword">new</span> TimerCallback(TimerCallback), state, <span class="number">0</span>, period);</span><br><span class="line">            LogHelper.WriteLog(<span class="string">"OnStart"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnStop</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//停止计时器</span></span><br><span class="line">            serviceTimer.Change(Timeout.Infinite, Timeout.Infinite);</span><br><span class="line">            LogHelper.WriteLog(<span class="string">"OnStop"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnContinue</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//重新开始计时</span></span><br><span class="line">            serviceTimer.Change(<span class="number">0</span>, period);</span><br><span class="line">            LogHelper.WriteLog(<span class="string">"OnContinue"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnPause</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//停止计时器</span></span><br><span class="line">            serviceTimer.Change(Timeout.Infinite, Timeout.Infinite);</span><br><span class="line">            LogHelper.WriteLog(<span class="string">"OnPause"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TimerCallback</span>(<span class="params"><span class="keyword">object</span> obj</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="comment">//隔一段时间调用一次</span></span><br><span class="line">            appBLL.Dothings();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Program.cs代码如下</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 应用程序的主入口点。</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span><br><span class="line">    </span>&#123;</span><br><span class="line">        ServiceBase[] ServicesToRun;</span><br><span class="line">        ServicesToRun = <span class="keyword">new</span> ServiceBase[] </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="keyword">new</span> Service() </span><br><span class="line">            &#125;;</span><br><span class="line">        ServiceBase.Run(ServicesToRun);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3.将这个服务程序切换到设计视图 </strong></p>
<p>右击设计视图选择”添加安装程序” </p>
<p>切换到刚被添加的ProjectInstaller的设计视图 </p>
<p>设置serviceInstaller1组件的属性： </p>
<p>1) ServiceName = My Sample Service </p>
<p>2) StartType = Automatic (开机自动运行) </p>
<p>设置serviceProcessInstaller1组件的属性 Account = LocalSystem </p>
<p><strong>4.安装和卸载服务 </strong></p>
<p>1) 手动安装服务 </p>
<p>访问项目中的已编译可执行文件所在的目录。 </p>
<p>用项目的输出作为参数，从命令行运行</p>
<p>InstallUtil.exe。在命令行中输入下列代码：</p>
<p>installutil yourproject.exe </p>
<p>2) 手动卸载服务</p>
<p>用项目的输出作为参数，从命令行运行</p>
<p>InstallUtil.exe。在命令行中输入下列代码：</p>
<p>installutil /u yourproject.exe </p>
<p>另一种方法：从命令行运行 sc delete 服务名 </p>
<p>3)安装Windows服务的批命令如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line"></span><br><span class="line">REM The following directory is for .NET2.0</span><br><span class="line">set DOTNETFX=%SystemRoot%\Microsoft.NET\Framework\v2.0.50727</span><br><span class="line">set PATH=%PATH%;%DOTNETFX%</span><br><span class="line"></span><br><span class="line">cd\</span><br><span class="line">cd &quot;H:\Net_Work\Madnet\Demo\WindowsService\WindowsService\bin\Debug&quot;</span><br><span class="line"></span><br><span class="line">echo 正在安装 测试服务...</span><br><span class="line">echo ---------------------------------------------------</span><br><span class="line"></span><br><span class="line">InstallUtil /i WindowsService.exe</span><br><span class="line">echo ---------------------------------------------------</span><br><span class="line"></span><br><span class="line">echo Done.</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>4)卸载Windows服务的批命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line"></span><br><span class="line">REM The following directory is for .NET2.0</span><br><span class="line">set DOTNETFX=%SystemRoot%\Microsoft.NET\Framework\v2.0.50727</span><br><span class="line">set PATH=%PATH%;%DOTNETFX%</span><br><span class="line"></span><br><span class="line">cd\</span><br><span class="line">cd &quot;H:\Net_Work\Madnet\Demo\WindowsService\WindowsService\bin\Debug&quot;</span><br><span class="line"></span><br><span class="line">echo 正在卸载 测试服务...</span><br><span class="line">echo ---------------------------------------------------</span><br><span class="line"></span><br><span class="line">InstallUtil /U WindowsService.exe</span><br><span class="line"></span><br><span class="line">echo ---------------------------------------------------</span><br><span class="line"></span><br><span class="line">echo Done.</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p><strong>5.调试服务</strong></p>
<p>1)安装您的服务。</p>
<p>2)可从服务控制管理器、”服务器资源管理器”或代码启动服务。 </p>
<p>3) 用Visual Studio装载这个项目，从”调试”菜单中选择”进程”。出现”进程”对话框。 </p>
<p>4)单击”显示系统进程”。 </p>
<p>5)在”可用进程”区域内单击服务的进程，然后单击”附加”。（提示 此进程将与服务的可执行文件同名。）出现”附加到进程”对话框。 </p>
<p>6)选择任意适当选项，然后单击”确定”关闭对话框。（注意 您现在已处于调试模式。） </p>
<p>7)设置要在代码中使用的任意断点。 </p>
<p>8)访问服务控制管理器并操纵您的服务，并发送停止、暂停和继续命令以命中您的断点</p>
<p><img src="/uploads/net-winservice/2010-02-28_201257.png" alt=""></p>
<p><a href="/uploads/net-winservice/WindowsService.rar">源文件下载</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[大规模网站架构]]></title>
      <url>http://xuzhibin.com/2009/12/16/web-architecture/</url>
      <content type="html"><![CDATA[<p>以下并非所有都经过本人实践,部分为根据资料的假想所得,切勿贯彻本本主义。</p>
<h1 id="网站架构目标"><a href="#网站架构目标" class="headerlink" title="网站架构目标"></a>网站架构目标</h1><ul>
<li>高可用性(High Availability)</li>
<li>可伸缩性(Scalability)</li>
<li>高性能(High Performance)</li>
</ul>
<h1 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h1><ul>
<li>尽量避免分布式，此为分布式第一原则</li>
<li>避免分布式事务</li>
</ul>
<h1 id="系统异构"><a href="#系统异构" class="headerlink" title="系统异构"></a>系统异构</h1><ul>
<li>架构与语言无关</li>
<li>系统可以多个平台并存(分层,模块化)</li>
</ul>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="数据库读写分离"><a href="#数据库读写分离" class="headerlink" title="数据库读写分离"></a>数据库读写分离</h2><ul>
<li>直接在程序中实现,或封装为ORM</li>
<li>MySQL Proxy</li>
</ul>
<h2 id="数据库纵横切分"><a href="#数据库纵横切分" class="headerlink" title="数据库纵横切分"></a>数据库纵横切分</h2><h3 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h3><ul>
<li>根据自定义策略,如hash(N)%n(按hash分),查找表</li>
<li>在水平分库时，应优先考虑从属关系，以降低查询的复杂度。如用户A和用户A所发表的文章应分在同一数据库中。</li>
<li>如有用到user_id，则应该在公共库中创建一个路由表，表字段主要有：user_id,user_name,DB_Name。如没有用到user_id，而是根据user_name判断及查询用户的关系，则可省略路由表，根据某种算法进行DB定位，此时应考虑以后增加节点时，DB定位是否会发生变化的情况。</li>
<li><p>为避免分表时自增id发生重复的情况，可选择以下的几个方法：</p>
<blockquote>
<p>1.在公共库创建一个空表，专门用于id分发。</p>
<p>2.利用递增值，如DB1的递增值为2，DB2的递增值为3，DB3的递增值为5…</p>
<p>3.利用初始值，id长度一般为11位，每个DB取9位（最多100个DB），如DB1的起始值为100000000，DB2的起始值为200000000，DB3的起始值为300000000…</p>
</blockquote>
</li>
</ul>
<p>– 在系统设计时就考虑数据库切分的话，应先在一台服务器创建多个数据库节点，当负载达到一定程度时，再将节点迁移至其他服务器上，这样可以减少数据迁移的工作量。每次增加数据库节点，原则上应为已有节点的倍数，而不是一台台的增加。</p>
<h3 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h3><ul>
<li>按功能分(论坛，博客）</li>
</ul>
<h2 id="表分区"><a href="#表分区" class="headerlink" title="表分区"></a>表分区</h2><h2 id="非关系数据库-NoSQL"><a href="#非关系数据库-NoSQL" class="headerlink" title="非关系数据库(NoSQL)"></a>非关系数据库(NoSQL)</h2><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><ul>
<li>Redis</li>
<li>Memcached</li>
<li><h3 id="海量存储"><a href="#海量存储" class="headerlink" title="海量存储"></a>海量存储</h3></li>
<li>MongoDB</li>
</ul>
<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><h2 id="DNS负载均衡"><a href="#DNS负载均衡" class="headerlink" title="DNS负载均衡"></a>DNS负载均衡</h2><h2 id="反向代理负载均衡"><a href="#反向代理负载均衡" class="headerlink" title="反向代理负载均衡"></a>反向代理负载均衡</h2><h2 id="负载均衡软件"><a href="#负载均衡软件" class="headerlink" title="负载均衡软件"></a>负载均衡软件</h2><ul>
<li>nginx</li>
<li>HAProxy</li>
<li>apache httpd</li>
<li>LVS(网络第四层工作)</li>
<li>F5(硬件，四层/七层)</li>
</ul>
<h1 id="高可用性"><a href="#高可用性" class="headerlink" title="高可用性"></a>高可用性</h1><ul>
<li>使用双机热备</li>
<li>故障时切换至备份机</li>
<li>工具(Linux-HA)</li>
<li>heartbeat</li>
</ul>
<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="按功能分"><a href="#按功能分" class="headerlink" title="按功能分"></a>按功能分</h2><ul>
<li>数据缓存</li>
<li>页面缓存</li>
<li>页面片段缓存</li>
<li>静态化</li>
<li>浏览器缓存</li>
</ul>
<h2 id="按存储介质分"><a href="#按存储介质分" class="headerlink" title="按存储介质分"></a>按存储介质分</h2><ul>
<li>本地缓存</li>
<li>分布式缓存<blockquote>
<p>memcached</p>
</blockquote>
</li>
</ul>
<h2 id="反向代理缓存"><a href="#反向代理缓存" class="headerlink" title="反向代理缓存"></a>反向代理缓存</h2><ul>
<li>squid 巨无霸</li>
<li>Varnish</li>
</ul>
<h1 id="静态资源分离"><a href="#静态资源分离" class="headerlink" title="静态资源分离"></a>静态资源分离</h1><h2 id="img-js-css使用单独的服务器处理请求"><a href="#img-js-css使用单独的服务器处理请求" class="headerlink" title="img,js,css使用单独的服务器处理请求"></a>img,js,css使用单独的服务器处理请求</h2><ul>
<li>图片服务器的域名不同</li>
<li>多台机器保存相同的图片(img3,img2子域名)</li>
<li>同一页面不同图片随机生成不同的子域名进行负载均衡</li>
</ul>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>A.一些大网站，图片服务器为什么都用另外一个域名? 比如yahoo.com 图片服务器用了yimg.com 的域名?</p>
<p>1.因为IE等浏览器对单一域名有并发限制</p>
<p>2.避免COOKIE 的影响,如taobao.com 域下的Cookie 信息不会被带到 taobaoimg.com 域下，提高了图片服务器解析 header 头的速度。</p>
<h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><h1 id="浏览器优化"><a href="#浏览器优化" class="headerlink" title="浏览器优化"></a>浏览器优化</h1><ul>
<li>节省带宽:js,css的静态gzip压缩<blockquote>
<p>http header: Content-Encoding: gzip</p>
</blockquote>
</li>
<li>浏览器缓存<blockquote>
<p>http header: Etag,Last-Modified</p>
</blockquote>
</li>
<li>小图片,css,js压缩,合并(JSA)</li>
</ul>
<h1 id="分布式Session"><a href="#分布式Session" class="headerlink" title="分布式Session"></a>分布式Session</h1><ul>
<li>单点认证(SSO)</li>
<li>session memcached</li>
<li>db</li>
</ul>
<h1 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h1><ul>
<li>MogileFS</li>
<li>FastDFS</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NVelocity直接使用字符串模板]]></title>
      <url>http://xuzhibin.com/2009/04/18/nvelocity-demo/</url>
      <content type="html"><![CDATA[<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> NVelocity;</span><br><span class="line"><span class="keyword">using</span> NVelocity.App;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">string</span> templates = <span class="string">"Hi $name $surname, The date is $date."</span>;</span><br><span class="line">            Dictionary oo = <span class="keyword">new</span> Dictionary();</span><br><span class="line">            oo.Add(<span class="string">"name"</span>, <span class="string">"Joe"</span>);</span><br><span class="line">            oo.Add(<span class="string">"surname"</span>, <span class="string">"Smith"</span>);</span><br><span class="line">            oo.Add(<span class="string">"date"</span>, DateTime.Now.ToString(<span class="string">"D"</span>));</span><br><span class="line">            Console.WriteLine(Fill(templates,oo));</span><br><span class="line">            Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">string</span> <span class="title">Fill</span>(<span class="params"><span class="keyword">string</span> template, IDictionary values</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> engine = <span class="keyword">new</span> VelocityEngine();</span><br><span class="line">            engine.Init();</span><br><span class="line">            <span class="keyword">var</span> context = <span class="keyword">new</span> VelocityContext();</span><br><span class="line">            <span class="keyword">if</span> (values != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">string</span> k <span class="keyword">in</span> values.Keys)</span><br><span class="line">                &#123;</span><br><span class="line">                    context.Put(k, values[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> writer = <span class="keyword">new</span> StringWriter())</span><br><span class="line">            &#123;</span><br><span class="line">                engine.Evaluate(context, writer, <span class="string">""</span>, template);</span><br><span class="line">                <span class="keyword">return</span> writer.GetStringBuilder().ToString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一段广告加载代码]]></title>
      <url>http://xuzhibin.com/2008/10/15/adload/</url>
      <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">var arr = &#123;</span><br><span class="line">  "default" : "http://dpvc.39.net/adpolestar/door/;ap=5E30CD32_CA9F</span><br><span class="line">_8CC4_BD09_09CE939700E0;ct=if;pu=san9;/?"</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">var Html = &#123;</span><br><span class="line">  load: function() &#123;</span><br><span class="line">    var s=document.getElementById("show_drug");</span><br><span class="line">    if(typeof(s)=="undefined"||s==null)</span><br><span class="line">        return arr["default"];</span><br><span class="line">    var code = s.src.replace(/^.+\?/,'');</span><br><span class="line">    code=decodeURI(code);</span><br><span class="line">    if(typeof(arr[code])!="undefined")</span><br><span class="line">        return arr[code];</span><br><span class="line">    var index;</span><br><span class="line">    while((index=code.lastIndexOf('_'))!=-1)&#123;</span><br><span class="line">        code=code.substring(0,index);</span><br><span class="line">        if(typeof(arr[code])!="undefined")</span><br><span class="line">        &#123;</span><br><span class="line">            return arr[code];</span><br><span class="line">                 &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr["default"];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById("drug_tl").innerHTML =</span><br><span class="line">"&lt;iframe SRC='"+Html.load()+"' NAME='adFrame' WIDTH='970' HEIGHT='90' </span><br><span class="line">FRAMEBORDER='no' BORDER='0' MARGINWIDTH='0' MARGINHEIGHT='0' </span><br><span class="line">SCROLLING='no'&gt;&lt;/iframe&gt;";</span><br></pre></td></tr></table></figure>
<p>注：show_drug为js id，如</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"show_drug"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">language</span>=<span class="string">"javascript"</span> </span><br><span class="line"><span class="attr">src</span>=<span class="string">"http://img.39.net/js/db/show_drug.js?%e4%ba%a7%e5%93%81_%e8%</span><br><span class="line">8d%af%e5%93%81_%e4%b8%ad%e6%88%90_%e7%97%94%e7%96%ae"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
